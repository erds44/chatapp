{"version":3,"sources":["components/room/createRoom.js","components/websocket/Websocket.js","components/notification/index.js","components/login/login.js","helpers/color-user-helper.js","actions/type.js","components/room/report/constant.js","components/chat/chat-area/ChatMessage.js","helpers/util.js","components/chat/chat-area/ChatMessages.js","components/chat/chat-area/Compose.js","components/chat/chat-area/ChatArea.js","components/room/joinedRoom.js","components/room/exitRoom.js","components/room/exitAllRooms.js","components/room/allRooms.js","components/room/report/reportForm.js","components/room/report/reportAdminForm.js","components/room/index.js","components/chat/userList/message.js","components/chat/userList/index.js","components/chat/inviteForm/index.js","components/chat/index.js","actions/index.js","auth/privateRoute.js","App.js","reportWebVitals.js","reducers/loginReducer.js","reducers/messageReducer.js","reducers/userListReducer.js","reducers/roomReducer.js","reducers/reportReducer.js","reducers/priMessageReducer.js","reducers/index.js","index.js"],"names":["layout","labelCol","span","wrapperCol","validateMessages","required","CreateRoom","props","interests","interest_string_list","Option","Select","visible","setVisible","useState","interestDisabled","setInterestDisabled","i","push","value","placement","title","content","name","onFinish","values","webSocket","send","JSON","stringify","command","body","interest","isPrivate","switch","style","outerWidth","Item","label","rules","message","pattern","valuePropName","onClick","prevState","mode","allowClear","width","placeholder","disabled","offset","type","htmlType","trigger","onVisibleChange","PlusCircleOutlined","WebSocket","config","duration","maxCount","notification","info","text","success","error","warn","connect","state","ownProps","logIn","login","history","useHistory","schools","school_string_list","dispatch","Form","useForm","form","validateFields","length","useEffect","console","log","isSignedIn","margin","headStyle","fontSize","backgroundColor","bodyStyle","user","age","school","align","QuestionCircleOutlined","min","max","textAlign","size","COLORS","copyCOLORS","COLOR_ASSIGNS","assignColors","id","color","shift","getAColor","SIGN_IN","SIGN_OUT","ON_MESSAGE","DELETE_MESSAGE","EDIT_MESSAGE","RECALL_MESSAGE","ROOM","JOIN_ROOM","ON_REPORT","PRI_MESSAGE","SETALLUSERS","EXIT_ROOM","reportReasons","BAN_BROADCAST","ChatMessage","onClickEdit","useDispatch","messageId","time","sender","isRecalled","recallTime","received","currentUser","useSelector","chatRoom","room","currentRoom","roomAdmin","userList","joinedRoom","indexOf","isOwnMessage","isAdmin","isAdminMessage","menu","event","key","payload","Date","getTime","getOperationsForMessage","map","operation","className","colorHelper","verticalAlign","gap","split","getDisplayName","onMouseEnter","dropDownElement","document","getElementById","visibility","opacity","onMouseLeave","moment","format","getRecallText","matchers","UrlMatcher","overlay","messageCensor","toLowerCase","includes","TextArea","Input","ChatMessages","inputMessages","modalVisible","setModalVisible","messageToEdit","setMessageToEdit","handleModalOK","editMessageTextArea","editedText","username","trim","source","handleClickEdit","onOk","onCancel","rows","showCount","defaultValue","onPressEnter","Compose","textAreaText","setTextAreaText","handleMessageSend","preventDefault","sendMessage","uuid","showEmojiPicker","setshowEmojiPicker","set","perLine","include","onSelect","emoji","native","onChange","target","float","SmileOutlined","Content","Layout","Footer","ChatArea","Header","messages","SubMenu","Menu","JoinedRoom","keyId","joinedRooms","userName","setReport","getRemoveButton","roomName","admin","marginLeft","ghost","shape","forceToLeave","reportRoom","reportName","getBlockButton","block","handleSelectedRoom","selectedKeys","defaultOpenKeys","GroupOutlined","index","onTitleClick","tag","ExitAllRooms","CloseCircleOutlined","AllRooms","allRooms","isPublic","e","LockOutlined","ReportForm","undefined","setValue","checkedReason","setCheckedReason","okButtonDisabled","setOkButtonDisabled","report","reportedUsername","reportedReason","reportedRoom","okButtonProps","Group","class","reportStore","isReportAdminVisible","okText","cancelText","setJoinedRooms","setUserList","setAllRooms","setUserName","setIsPublic","msg","Message","UserList","allUsers","allUserList","height","position","overflow","itemLayout","dataSource","renderItem","item","padding","Meta","avatar","description","rooms","selectedChatRoom","setName","inviteUserName","invitedRoom","Sider","priMsg","priMessage","data","drawer_visible","setDrawerVisible","exitDispatch","profile","find","myInterests","mes","handleReply","styles","paddingTop","feedback","notifications","theme","overflowY","overFlow","fontWeight","icon","UserOutlined","closable","onClose","minHeight","borderLeft","mesId","logInStore","Component","component","render","to","pathname","createBrowserHistory","onMessage","parse","section","request","param1","param2","param3","param4","param5","onopen","onmessage","onclose","Modal","path","exact","Login","Chat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INTIAL_STATE","INITIAL_STATE","substring","parseNestedList","list","v","start","end","ele","combineReducers","action","newChatRoomMessages","filter","m","newMessages","selectedRoom","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM"],"mappings":"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","file":"static/js/main.de23507e.chunk.js","sourcesContent":["import {Form, Input, Switch, Select, Button, Popover, Menu, Modal} from 'antd';\r\nimport React, {useState} from 'react';\r\nimport {PlusCircleOutlined} from \"@ant-design/icons\";\r\nimport webSocket from \"../websocket/Websocket\";\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 8,\r\n    },\r\n    wrapperCol: {\r\n        span: 16,\r\n    },\r\n};\r\nconst validateMessages = {\r\n    required: '${label} is required!',\r\n};\r\n\r\nconst CreateRoom = (props) => {\r\n    const interests = [];\r\n    const interest_string_list = [\"Traveling\", \"Reading\", \"Music\", \"Sports\", \"Movies\", \"Games\"];\r\n    const {Option} = Select;\r\n    const {visible, setVisible} = props;\r\n    const [interestDisabled, setInterestDisabled] = useState(true);\r\n    for (let i = 0; i < 6; i++) {\r\n        interests.push(<Option value={interest_string_list[i]}>{interest_string_list[i]}</Option>);\r\n    }\r\n    const onFinish = (values) => {\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"createRoom\",\r\n                    body: {\r\n                        name: values.name,\r\n                        interests: values.interest,\r\n                        isPrivate: values.switch || false\r\n                    }\r\n                }\r\n            )\r\n        )\r\n        setVisible(false);\r\n    };\r\n\r\n    const handleVisibleChange = visible => {\r\n        setVisible(visible);\r\n    };\r\n    return (\r\n        <Popover placement=\"rightTop\" title={\"Create Room\"}\r\n                 content={<Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}\r\n                                style={{outerWidth: \"500\"}}>\r\n                     <Form.Item name={\"name\"}\r\n                                label=\"Name\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Name is required!',\r\n                                    },\r\n                                    {\r\n                                        pattern: /^[a-zA-Z0-9_]{1,20}$/,\r\n                                        message: 'Name should be 1-20 alphanumeric characters or underscores',\r\n                                    },\r\n                                ]}><Input/>\r\n                     </Form.Item>\r\n                     <Form.Item name=\"switch\" label=\"Private\" valuePropName=\"checked\"><Switch onClick={() => {\r\n                         setInterestDisabled(prevState => !prevState)\r\n                     }}/>\r\n                     </Form.Item>\r\n                     <Form.Item name={\"interest\"}\r\n                                label=\"Interests\"\r\n                                rules={[{required: !interestDisabled}]}>\r\n                         <Select mode=\"multiple\"\r\n                                 allowClear\r\n                                 style={{width: '100%'}}\r\n                                 placeholder=\"Please select\"\r\n                                 disabled={interestDisabled}>{interests}</Select>\r\n                     </Form.Item>\r\n\r\n                     <Form.Item wrapperCol={{...layout.wrapperCol, offset: 8}}>\r\n                         <Button type=\"primary\" htmlType=\"submit\">\r\n                             Submit\r\n                         </Button>\r\n                     </Form.Item>\r\n                 </Form>}\r\n                 trigger=\"click\"\r\n                 visible={visible}\r\n                 onVisibleChange={handleVisibleChange}>\r\n            <span><PlusCircleOutlined/></span>Create\r\n        </Popover>\r\n    );\r\n\r\n};\r\nexport default CreateRoom;\r\n\r\n\r\n","import CreateRoom from \"../room/createRoom\";\r\nconst webSocket = new WebSocket(\"wss://chatapp-team-sammytheowl.herokuapp.com/chatapp\")\r\n// const webSocket = new WebSocket(\"ws://localhost:4567/chatapp\")\r\nexport default webSocket;\r\n\r\n\r\n\r\n\r\n","import { message } from \"antd\";\r\n\r\nmessage.config({\r\n  duration: 3,\r\n  maxCount: 5\r\n});\r\n\r\nconst notification = {\r\n  info: (text) => {\r\n    message.info({ content: text }, 5);\r\n  },\r\n  success: text => {\r\n    message.success({ content: text }, 5);\r\n  },\r\n  error: text => {\r\n    message.error({ content: text }, 5);\r\n  },\r\n  warn: text => {\r\n    message.warn({ content: text }, 5);\r\n  }\r\n};\r\n\r\nexport default notification;\r\n","import {React, useEffect, useState} from 'react'\r\nimport {Card, Form, Input, message, Button, Select, Modal, InputNumber, Tooltip} from 'antd'\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nimport {useHistory} from 'react-router-dom'\r\nimport webSocket from \"../websocket/Websocket\"\r\nimport { connect } from 'react-redux'\r\nimport notification from \"../notification\";\r\n\r\n\r\nconst layout = {\r\n    labelCol: {span: 4},\r\n    wrapperCol: {span: 20},\r\n};\r\n\r\nconst validateMessages = {\r\n    required: '${label} is required!'\r\n};\r\n\r\nconst Login = (props) => {\r\n\r\n    const history = useHistory();\r\n    const {Option} = Select;\r\n    const interests = [];\r\n    const schools = [];\r\n    const interest_string_list = [\"Traveling\", \"Reading\", \"Music\", \"Sports\", \"Movies\", \"Games\"];\r\n    const school_string_list = [\"Rice University\", \"Duke University\", \"USC\", \"UCLA\", \"New York University\", \"Other\"];\r\n    const {dispatch, logIn} = props;\r\n    const [form] = Form.useForm();\r\n    const {validateFields} = form;\r\n    // const ss=[{value:'a', label:'a'}]\r\n\r\n    for (let i = 0; i < school_string_list.length; i++) {\r\n        schools.push(<Option value={school_string_list[i]}>{school_string_list[i]}</Option>);\r\n    }\r\n\r\n    for (let i = 0; i < interest_string_list.length; i++) {\r\n        interests.push(<Option value={interest_string_list[i]}>{interest_string_list[i]}</Option>);\r\n    }\r\n\r\n    const onFinish = values => {\r\n        console.log(values.user);\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                command: \"login\",\r\n                body: {\r\n                    name: values.user.name,\r\n                    age: values.user.age,\r\n                    school: values.user.school,\r\n                    interests: values.user.interests\r\n                }\r\n            })\r\n        )\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(logIn);\r\n        if(logIn) {\r\n            if (logIn.isSignedIn !== null) {\r\n                if (logIn.isSignedIn === true) {\r\n                    history.push('/chat');\r\n                } else {\r\n                    notification.error(\"The username already exists. Please choose another one!\");\r\n                }\r\n            }\r\n        }\r\n    }, [logIn])\r\n\r\n    return (\r\n        <Card title=\"Login Chat Room\" style={{width: '600px', margin: '80px auto'}}\r\n              headStyle={{fontSize: '30px', backgroundColor: '#d9d9d9'}}\r\n              bodyStyle={{backgroundColor: '#f5f5f5'}}>\r\n            <Form {...layout} name=\"LoginForm\" form={form} onFinish={onFinish} validateMessages={validateMessages} align=\"left\">\r\n                <Form.Item\r\n                    name={['user', 'name']}\r\n                    label={\r\n                        <span>\r\n                            Name&nbsp;\r\n                            <Tooltip title=\"5-20 alphanumeric characters or underscores\">\r\n                                <QuestionCircleOutlined />\r\n                            </Tooltip>\r\n                        </span>\r\n                    }\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Name is required!',\r\n                        },\r\n                        {\r\n                            pattern: /^[a-zA-Z0-9_]{5,20}$/,\r\n                            message: 'Name should be 5-20 alphanumeric characters or underscores',\r\n                        },\r\n                    ]}>\r\n                    <Input placeholder=\"Your Name\"/>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={['user', 'age']} label=\"Age\" rules={[{required: true}]}>\r\n                    <InputNumber min={0} max={200}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={['user', 'school']} label=\"School\" rules={[{required: true}]}>\r\n                    <Select style={{width: '100%', textAlign: 'left'}}\r\n                            allowClear\r\n                            placeholder=\"Please select your school\">{schools}</Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={['user', 'interests']} label=\"Interests\" rules={[{required: true}]}>\r\n                    <Select mode=\"multiple\"\r\n                            allowClear\r\n                            style={{width: '100%', textAlign: 'left'}}\r\n                            placeholder=\"Please select your interests\">{interests}</Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{...layout.wrapperCol, offset: 20}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\" >\r\n                        Login\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Card>\r\n\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return { logIn: state.login }\r\n  };\r\n\r\nexport default connect(mapStateToProps, {})(Login);","const FLAT_BLUE = '#355ca9';\r\nconst DEEP_LAVENDER = '#8665b6';\r\nconst AZURE = '#2196f2';\r\nconst COOL_BLUE = '#5571bc';\r\nconst ORANGE_RED = '#fe5722';\r\nconst SLATE = '#43555f';\r\nconst TEAL = '#009688';\r\nconst MARIGOLD = '#febf0a';\r\nconst PINK = '#e81f63';\r\nconst AZURE_TWO = '#06a9f3';\r\nconst TURQUOISE_BLUE = '#03bcd3';\r\nconst TANGERINE = '#fe9800';\r\nconst SUNSHINE_YELLOW = '#feea3b';\r\nconst SICKLY_YELLOW = '#ccdb3a';\r\nconst GREEN = '#8bc24b';\r\nconst MID_GREEN = '#4baf50';\r\nconst VIRIDIAN = '#22828d';\r\nconst FRENCH_BLUE = '#3f51b5';\r\nconst BARNEY = '#9c26b0';\r\nconst BLUEY_PURPLE = '#673ab7';\r\nconst BLUE_GREY = '#607d8b';\r\nconst WARM_GREY = '#9e9e9e';\r\nconst DARK_TAUPE = '#795548';\r\n\r\nconst COLORS = [\r\n    FLAT_BLUE,\r\n    AZURE,\r\n    COOL_BLUE,\r\n    ORANGE_RED,\r\n    SLATE,\r\n    DEEP_LAVENDER,\r\n    TEAL,\r\n    MARIGOLD,\r\n    PINK,\r\n    AZURE_TWO,\r\n    TURQUOISE_BLUE,\r\n    TANGERINE,\r\n    SUNSHINE_YELLOW,\r\n    SICKLY_YELLOW,\r\n    GREEN,\r\n    MID_GREEN,\r\n    VIRIDIAN,\r\n    FRENCH_BLUE,\r\n    BARNEY,\r\n    BLUEY_PURPLE,\r\n    BLUE_GREY,\r\n    WARM_GREY,\r\n    DARK_TAUPE,\r\n];\r\nlet copyCOLORS = [\r\n    ...COLORS,\r\n];\r\n\r\nconst getAColor = () => {\r\n    let color = copyCOLORS.shift();\r\n    if (!color) {\r\n        copyCOLORS = [\r\n            ...COLORS,\r\n        ];\r\n        color = copyCOLORS.shift();\r\n    }\r\n    return color;\r\n};\r\n\r\nconst COLOR_ASSIGNS = {};\r\nconst assignColors = (id) => {\r\n    if (!COLOR_ASSIGNS[id]) {\r\n        COLOR_ASSIGNS[id] = getAColor();\r\n    }\r\n    return COLOR_ASSIGNS[id];\r\n};\r\nexport default assignColors;\r\n","export const SIGN_IN = 'SIGN_IN';\r\nexport const SIGN_OUT = 'SIGN_OUT';\r\n\r\nexport const ON_MESSAGE = 'ON_MESSAGE';\r\nexport const DELETE_MESSAGE = 'DELETE_MESSAGE';\r\nexport const EDIT_MESSAGE = 'EDIT_MESSAGE';\r\nexport const RECALL_MESSAGE = 'RECALL_MESSAGE';\r\n\r\nexport const ROOM = 'ROOM';\r\nexport const JOIN_ROOM = 'JOIN_ROOM';\r\n\r\nexport const ON_REPORT = 'ON_REPORT';\r\nexport const BAN = 'BAN';\r\n\r\nexport const PRI_MESSAGE = 'PRI_MESSAGE';\r\n\r\nexport const RESET = 'RESET';\r\nexport const SETALLUSERS = 'SETALLUSERS';\r\nexport const EXIT_ROOM = 'EXIT_ROOM';","export const reportReasons = [\"Sexual Content\", \"Violent or repulsive content\", \"Spam or misleading\"];\r\nexport const BAN_BROADCAST = \"broadcast\";\r\nexport const BAN_PRIVATEMSG = \"privateMsg\";\r\nexport const BAN_REPORT = \"report\";","import React from \"react\";\r\nimport { Row, Col, Menu, Dropdown, Button, Avatar } from \"antd\";\r\nimport moment from \"moment\";\r\nimport \"./ChatMessage.css\";\r\nimport colorHelper from \"../../../helpers/color-user-helper\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  DELETE_MESSAGE,\r\n  RECALL_MESSAGE,\r\n  EDIT_MESSAGE\r\n} from \"../../../actions/type\";\r\nimport webSocket from \"../../websocket/Websocket\";\r\nimport { BAN_BROADCAST } from \"../../room/report/constant\";\r\nimport Interweave from 'interweave';\r\nimport { UrlMatcher } from 'interweave-autolink';\r\n\r\nconst ChatMessage = ({ message, onClickEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    id: messageId,\r\n    text,\r\n    time,\r\n    sender,\r\n    isRecalled,\r\n    recallTime,\r\n    received\r\n  } = message;\r\n\r\n  const currentUser = useSelector(state => state.login.user);\r\n  const chatRoom = useSelector(state => state.room.currentRoom);\r\n  const userList = useSelector(state => state.room.userList);\r\n  const roomState = useSelector(state => state.room);\r\n  const roomAdmin = useSelector(state => {\r\n    if (!state.room.userList || !state.room.joinedRoom || !state.room.userList[state.room.joinedRoom.indexOf(chatRoom)]) {\r\n      return null;\r\n    }\r\n    return state.room.userList[state.room.joinedRoom.indexOf(chatRoom)][0];\r\n  });\r\n  const isOwnMessage = currentUser === message.sender;\r\n  const isAdmin = currentUser === roomAdmin;\r\n  const isAdminMessage = sender === roomAdmin;\r\n  const getOperationsForMessage = (isAdmin, isOwnMessage) => {\r\n    if (isOwnMessage) {\r\n      return [\"edit\", \"delete\", \"recall\"];\r\n    }\r\n    if (isAdmin) {\r\n      return [\"delete\"];\r\n    }\r\n    return [];\r\n  };\r\n  const handleMenuClick = event => {\r\n    if (!event || !event.key) {\r\n      return;\r\n    }\r\n    switch (event.key) {\r\n      case \"edit\": {\r\n        onClickEdit(message);\r\n        break;\r\n      }\r\n      case \"delete\": {\r\n        dispatch({\r\n          type: DELETE_MESSAGE,\r\n          payload: {\r\n            messageId,\r\n            chatRoom\r\n          }\r\n        });\r\n        webSocket.send(\r\n          JSON.stringify({\r\n            command: \"deleteMessage\",\r\n            body: {\r\n              messageId,\r\n              chatRoom\r\n            }\r\n          })\r\n        );\r\n        break;\r\n      }\r\n      case \"recall\": {\r\n        dispatch({\r\n          type: RECALL_MESSAGE,\r\n          payload: {\r\n            messageId,\r\n            chatRoom\r\n          }\r\n        });\r\n        webSocket.send(\r\n          JSON.stringify({\r\n            command: \"recallMessage\",\r\n            body: {\r\n              messageId,\r\n              chatRoom,\r\n              recallTime: new Date().getTime()\r\n            }\r\n          })\r\n        );\r\n        break;\r\n      }\r\n    }\r\n  };\r\n  const menu = (\r\n    <Menu onClick={handleMenuClick}>\r\n      {getOperationsForMessage(isAdmin, isOwnMessage).map(operation => {\r\n        return <Menu.Item key={operation}>{operation}</Menu.Item>;\r\n      })}\r\n    </Menu>\r\n  );\r\n\r\n  const handleMouseEnter = () => {\r\n    const dropDownElement = document.getElementById(`${messageId}-dropdown`);\r\n    if (!dropDownElement) {\r\n      return;\r\n    }\r\n    dropDownElement.style.visibility = \"visible\";\r\n    dropDownElement.style.opacity = \"1\";\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    const dropDownElement = document.getElementById(`${messageId}-dropdown`);\r\n    if (!dropDownElement) {\r\n      return;\r\n    }\r\n    dropDownElement.style.visibility = \"hidden\";\r\n    dropDownElement.style.opacity = \"0\";\r\n  };\r\n\r\n  const getDisplayName = sender => {\r\n    return sender.split(\"_\").map(name => name[0]);\r\n  };\r\n\r\n  const getRecallText = (sender, recallTime) => {\r\n    return `******* This message was recalled at ${moment(recallTime).format(\r\n      \"MMM DD hh:mm\"\r\n    )} *******`;\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col span={1} className=\"avatar-container\">\r\n        <Avatar\r\n          style={{\r\n            backgroundColor: colorHelper(sender),\r\n            verticalAlign: \"middle\"\r\n          }}\r\n          size=\"large\"\r\n          gap={1}\r\n        >\r\n          {getDisplayName(sender)}\r\n        </Avatar>\r\n      </Col>\r\n      <Col span={23}>\r\n        <Row\r\n          className={`${messageId ?? \"\"} message-wrapper`}\r\n          onMouseEnter={handleMouseEnter}\r\n          onMouseLeave={handleMouseLeave}\r\n        >\r\n          <Col span={22}>\r\n            <Row className=\"message-header\">\r\n              <Col className=\"message-sender\">\r\n                {(isOwnMessage && \"ME\") || sender}{\" \"}\r\n                {isAdminMessage && \" (admin)\"}\r\n              </Col>\r\n              <Col className=\"message-time\">\r\n                {!isRecalled && moment(time).format(\"ddd MMM DD hh:mm:ss\")}\r\n                {received && \" (received)\"}\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col className=\"message-text\">\r\n                <Interweave\r\n                    content={(!isRecalled && text) || getRecallText(sender, recallTime)}\r\n                    matchers={[new UrlMatcher('url')]}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n          <Col\r\n            span={2}\r\n            id={`${messageId}-dropdown`}\r\n            className={\"message-dropdown\"}\r\n          >\r\n            {!isRecalled && (isOwnMessage || isAdmin) && (\r\n              <Dropdown overlay={menu} placement=\"bottomLeft\">\r\n                <Button>...</Button>\r\n              </Dropdown>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\nexport default ChatMessage;\r\n","export const messageCensor = (content) => {\r\n    return !content.toLowerCase().includes(\"hate\");\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Row, Input, Modal } from \"antd\";\r\nimport ChatMessage from \"./ChatMessage\";\r\nimport \"./ChatMessages.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { EDIT_MESSAGE } from \"../../../actions/type\";\r\nimport webSocket from \"../../websocket/Websocket\";\r\nimport {messageCensor} from \"../../../helpers/util\";\r\nimport {BAN_BROADCAST} from \"../../room/report/constant\";\r\nconst { TextArea } = Input;\r\n\r\nconst ChatMessages = ({ inputMessages }) => {\r\n  const dispatch = useDispatch();\r\n  const currentUser = useSelector(state => state.login.user);\r\n  const currentRoom = useSelector(state => state.room.currentRoom);\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [messageToEdit, setMessageToEdit] = useState(\"\");\r\n\r\n  const handleModalOK = () => {\r\n    setModalVisible(false);\r\n    const editMessageTextArea = document.getElementById(`editMessageTextArea`);\r\n\r\n    if (!messageCensor(editMessageTextArea.value)) {\r\n      webSocket.send(\r\n        JSON.stringify({\r\n          command: \"ban\",\r\n          body: {\r\n            username: currentUser.trim(),\r\n            room: currentRoom.trim(),\r\n            source: BAN_BROADCAST\r\n          }\r\n        })\r\n      );\r\n      return;\r\n    }\r\n\r\n    const payload = {\r\n      messageId: messageToEdit.id,\r\n      chatRoom: currentRoom,\r\n      editedText: editMessageTextArea.value\r\n    };\r\n    dispatch({\r\n      type: EDIT_MESSAGE,\r\n      payload\r\n    });\r\n    webSocket.send(\r\n      JSON.stringify({\r\n        command: \"editMessage\",\r\n        body: payload\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleClickEdit = message => {\r\n    setMessageToEdit(message);\r\n    setModalVisible(true);\r\n  };\r\n\r\n  return (\r\n    <article id={\"chat-messages\"}>\r\n      {inputMessages &&\r\n        inputMessages.map(message => {\r\n          return (\r\n            <Row className=\"message\">\r\n              <ChatMessage message={message} onClickEdit={handleClickEdit} />\r\n            </Row>\r\n          );\r\n        })}\r\n      <Modal\r\n        title=\"Edit Message\"\r\n        visible={modalVisible}\r\n        onOk={handleModalOK}\r\n        onCancel={() => setModalVisible(false)}\r\n      >\r\n        <TextArea\r\n          id={\"editMessageTextArea\"}\r\n          rows={4}\r\n          showCount={true}\r\n          defaultValue={messageToEdit?.text}\r\n          onPressEnter={handleModalOK}\r\n        />\r\n      </Modal>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default ChatMessages;\r\n","import React, { useState } from \"react\";\r\nimport { Popover, Space, Row, Col, Input, Button } from \"antd\";\r\nimport \"./Compose.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ON_MESSAGE } from \"../../../actions/type\";\r\nimport * as uuid from \"uuid\";\r\nimport webSocket from \"../../websocket/Websocket\";\r\nimport { messageCensor } from \"../../../helpers/util\";\r\nimport { BAN_BROADCAST } from \"../../room/report/constant\";\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\nimport { Picker } from \"emoji-mart\";\r\nimport { SmileOutlined  } from '@ant-design/icons';\r\n\r\n\r\nconst { TextArea } = Input;\r\n\r\n\r\nconst Compose = () => {\r\n  const dispatch = useDispatch();\r\n  const currentUser = useSelector(state => state.login.user);\r\n  const currentRoom = useSelector(state => state.room.currentRoom);\r\n  const [textAreaText, setTextAreaText] = useState(\"\");\r\n  const handleMessageSend = event => {\r\n    event.preventDefault();\r\n    if (!textAreaText) {\r\n      return;\r\n    }\r\n\r\n    if (!messageCensor(textAreaText)) {\r\n      webSocket.send(\r\n        JSON.stringify({\r\n          command: \"ban\",\r\n          body: {\r\n            username: currentUser.trim(),\r\n            room: currentRoom.trim(),\r\n            source: BAN_BROADCAST\r\n          }\r\n        })\r\n      );\r\n    } else {\r\n      sendMessage();\r\n    }\r\n\r\n    setTextAreaText('');\r\n  };\r\n  const handleMessageChange = event => {\r\n    setTextAreaText(event.target.value);\r\n  };\r\n\r\n  const sendMessage = () => {\r\n    const payload = {\r\n      chatRoom: currentRoom,\r\n      text: textAreaText,\r\n      id: uuid.v4(),\r\n      time: new Date().getTime(),\r\n      sender: currentUser\r\n    };\r\n    dispatch({\r\n      type: ON_MESSAGE,\r\n      payload: {\r\n        ...payload,\r\n        received: true\r\n      }\r\n    });\r\n    webSocket.send(\r\n      JSON.stringify({\r\n        command: \"broadcast\",\r\n        body: payload\r\n      })\r\n    );\r\n  };\r\n\r\n  const [showEmojiPicker, setshowEmojiPicker] = useState(false);\r\n\r\n  const toggleEmojiPicker = () => {\r\n    setshowEmojiPicker(!showEmojiPicker)\r\n  }\r\n\r\n  const emojiHandler = (emoji) => {\r\n    setTextAreaText(textAreaText + emoji.native);\r\n  }\r\n\r\n  const content = (\r\n        <Picker set = 'twitter' perLine = {12} include = {['smileys','people']} onSelect={emojiHandler}/>\r\n  );\r\n\r\n  return (\r\n    <div id={\"compose\"}>\r\n      <Row>\r\n        <TextArea\r\n          allowClear={true}\r\n          id={\"compose-textarea\"}\r\n          rows={4}\r\n          // defaultValue={\"\"}\r\n          value={textAreaText}\r\n          showCount={true}\r\n          onPressEnter={handleMessageSend}\r\n          onChange={handleMessageChange}\r\n        />\r\n      </Row>\r\n      <Space style = {{float:\"right\"}}>\r\n        <Popover content={content}  trigger=\"click\"\r\n                 visible={showEmojiPicker}\r\n                 onVisibleChange={toggleEmojiPicker}\r\n        >\r\n          <Button ><SmileOutlined /></Button>\r\n        </Popover>\r\n          <Button onClick={handleMessageSend}>Send</Button>\r\n      </Space>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Compose;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Row, Layout } from \"antd\";\r\nimport ChatMessages from \"./ChatMessages\";\r\nimport Compose from \"./Compose\";\r\nimport \"./ChatArea.css\";\r\n\r\nconst { Content, Footer, Header } = Layout;\r\n\r\nconst ChatArea = ({ chatRoom }) => {\r\n  const messages = useSelector(state => {\r\n    return state.message.messages;\r\n  });\r\n\r\n  return (\r\n    <div id={\"chat-area\"}>\r\n      <Layout>\r\n        <Content>\r\n          <ChatMessages inputMessages={messages[chatRoom]} />\r\n        </Content>\r\n        <Footer>\r\n          <Compose />\r\n        </Footer>\r\n      </Layout>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatArea;\r\n","import {Tooltip, Menu, Tag, Button, Dropdown, Col, Popover} from \"antd\";\r\nimport {GroupOutlined} from \"@ant-design/icons\";\r\nimport React, {useState} from \"react\";\r\nimport webSocket from \"../websocket/Websocket\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {JOIN_ROOM} from \"../../actions/type\";\r\n\r\n\r\nconst {SubMenu} = Menu;\r\nconst JoinedRoom = (props) => {\r\n    let keyId = 1;\r\n    const dispatch = useDispatch();\r\n    const {joinedRooms, userList, userName, setReport} = props;\r\n    const report = (reportRoom, reportName) => {\r\n        setReport({visible: true, reportRoom: reportRoom, reportName: reportName})\r\n    }\r\n    const forceToLeave = (name, room) => {\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"forceToLeave\",\r\n                    body: {\r\n                        userName: name,\r\n                        roomName: room\r\n                    }\r\n                }\r\n            )\r\n        )\r\n    };\r\n\r\n    const block = (name) => {\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"block\",\r\n                    body: {\r\n                        userName: name\r\n                    }\r\n                }\r\n            )\r\n        )\r\n\r\n    }\r\n\r\n    const getRemoveButton = (name, roomName, admin) => {\r\n        if (name === userName || name === admin) return null;\r\n        if (userName === admin) return (<Tooltip title=\"Remove\"><Button style={{marginLeft: '5px'}} ghost = \"true\" size = \"small\" key={name + \"remove\" + keyId++} type=\"primary\" shape=\"circle\"\r\n                                                                        onClick={() => forceToLeave(name, roomName)}>R</Button></Tooltip>)\r\n        return (<Tooltip title=\"Report\"><Button  style={{marginLeft: '5px'}} ghost = \"true\" size = \"small\" type=\"primary\"  shape=\"circle\" key={name + \"report\" + keyId++} onClick={() => {\r\n            report(roomName, name)\r\n        }}>!</Button></Tooltip>)\r\n    }\r\n\r\n    const getBlockButton = (name) => {\r\n        if (name !== userName) return<Tooltip title=\"Block\"> <Button ghost = \"true\" size = \"small\" type=\"primary\" shape=\"circle\"  key={name + \"block\" + keyId++}\r\n                                              onClick={() => block(name)}>B</Button></Tooltip>\r\n        return null\r\n    }\r\n\r\n    const handleSelectedRoom = ({key}) => {\r\n        dispatch({\r\n            type: JOIN_ROOM,\r\n            payload: key\r\n        })\r\n    }\r\n    return (\r\n        <Menu mode=\"inline\" selectedKeys={['']} defaultOpenKeys={['joinedRooms']}>\r\n            <SubMenu key = \"joinedRooms\" title={<span><GroupOutlined/><span>Joined Rooms</span></span>}>\r\n                {\r\n                    joinedRooms.map((name, index) => {\r\n                        return (\r\n\r\n                            <SubMenu key={name} title={name} onTitleClick={handleSelectedRoom}>\r\n                                {userList[index].map(name => {\r\n                                    let color = (userList[index][0] === name) ? \"magenta\" : \"green\";\r\n                                    let tag = (userList[index][0] === name) ? \"Admin\" : \"Member\";\r\n                                    return (\r\n                                        <Menu.Item key={name + keyId++}><Tag color={color}>{tag}</Tag>{name}\r\n                                            {getRemoveButton(name, joinedRooms[index], userList[index][0])}\r\n                                            {getBlockButton(name)}\r\n                                        </Menu.Item>\r\n                                    )\r\n\r\n                                })\r\n                                }\r\n\r\n                            </SubMenu>\r\n                        )\r\n                    })\r\n                }\r\n            </SubMenu>\r\n        </Menu>\r\n    );\r\n\r\n\r\n}\r\nexport default JoinedRoom;","import {Menu, Tag, Popover, Button, Modal} from \"antd\";\r\nimport {CloseCircleOutlined, GroupOutlined, MinusCircleOutlined, PlusCircleOutlined} from \"@ant-design/icons\";\r\nimport React, {useState} from \"react\";\r\nimport {Route} from \"react-router-dom\";\r\nimport CreateRoom from \"./createRoom\";\r\nimport webSocket from \"../websocket/Websocket\";\r\nimport JoinedRoom from \"./joinedRoom\";\r\n\r\nconst {SubMenu} = Menu;\r\n\r\nconst ExitRoom = (props) => {\r\n    const {joinedRooms} = props;\r\n    const onFinish = (values) => {\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"exitRoom\",\r\n                    body: {\r\n                        name: values.key\r\n                    }\r\n                }\r\n            )\r\n        )\r\n    };\r\n    return (\r\n        <Menu mode=\"inline\" onClick={(e) => {\r\n            onFinish(e)\r\n        }}>\r\n            <SubMenu title={<span><span><MinusCircleOutlined/></span>Exit</span>}>\r\n                {\r\n                    joinedRooms.map(name => {\r\n                        return (\r\n                            <Menu.Item key={name}>{name}</Menu.Item>\r\n                        )\r\n                    })\r\n                }\r\n            </SubMenu>\r\n        </Menu>\r\n    );\r\n}\r\nexport default ExitRoom;","import {Menu, Tag, Popover, Button, Modal} from \"antd\";\r\nimport {CloseCircleOutlined, GroupOutlined, MinusCircleOutlined, PlusCircleOutlined} from \"@ant-design/icons\";\r\nimport React, {useState} from \"react\";\r\nimport {Route} from \"react-router-dom\";\r\nimport CreateRoom from \"./createRoom\";\r\nimport webSocket from \"../websocket/Websocket\";\r\nimport JoinedRoom from \"./joinedRoom\";\r\n\r\n\r\nconst ExitAllRooms = () => {\r\n    const onFinish = () => {\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"exitAllRoom\",\r\n                    body: {\r\n                    }\r\n                }\r\n            )\r\n        )\r\n    };\r\n\r\n    return (\r\n        <Menu mode=\"inline\" selectedKeys={['']} onClick={onFinish}>\r\n            <Menu.Item><span><CloseCircleOutlined/></span>Exit All</Menu.Item>\r\n        </Menu>\r\n    );\r\n}\r\nexport default ExitAllRooms;","import {Menu} from \"antd\";\r\nimport {LockOutlined} from \"@ant-design/icons\";\r\nimport {GroupOutlined} from \"@ant-design/icons\";\r\nimport React from \"react\";\r\nimport webSocket from \"../websocket/Websocket\";\r\n\r\nconst {SubMenu} = Menu;\r\nconst AllRooms = (props) => {\r\n    const {allRooms, isPublic} = props;\r\n    const onFinish = (values) => {\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"joinRoom\",\r\n                    body: {\r\n                        name: values.key\r\n                    }\r\n                }\r\n            )\r\n        )\r\n    };\r\n\r\n    return (\r\n        <Menu mode=\"inline\"  onClick={(e) => {\r\n            onFinish(e)\r\n        }} defaultOpenKeys={['allRooms']} >\r\n            <SubMenu key=\"allRooms\" title={<span><GroupOutlined/><span>All Rooms</span></span>}>\r\n                {\r\n                    allRooms.map((name, index) => {\r\n                        return (\r\n\r\n                            <Menu.Item key={name}><span>{isPublic[index] === \"false\" ?\r\n                                <span><LockOutlined/></span> : null}{name}</span></Menu.Item>\r\n                        );\r\n                    })\r\n\r\n                }\r\n            </SubMenu>\r\n        </Menu>\r\n    );\r\n\r\n\r\n}\r\nexport default AllRooms;","import { Modal, Button } from 'antd';\r\nimport React, { useState } from \"react\";\r\nimport webSocket from \"../../websocket/Websocket\";\r\nimport { Radio, Input } from 'antd';\r\nimport './reportForm.css'\r\nimport {reportReasons} from './constant'\r\n\r\nconst ReportForm = (props) => {\r\n    const [value, setValue] = useState(undefined);\r\n    const [checkedReason, setCheckedReason] = useState(\"\");\r\n    const [okButtonDisabled, setOkButtonDisabled]  = useState(true);\r\n    const {report, setReport} = props;\r\n\r\n    const handleOk = () => {\r\n       setReport({...report, visible: false})\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"report\",\r\n                    body: {\r\n                        reportedUsername: report.reportName,\r\n                        reportedReason: checkedReason,\r\n                        reportedRoom: report.reportRoom,\r\n                    }\r\n                }\r\n            )\r\n        )\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setReport({...report, visible: false})\r\n    };\r\n\r\n    const onChange = e => {\r\n        console.log('radio checked', e.target.value);\r\n        setOkButtonDisabled(false);\r\n        setValue(e.target.value);\r\n\r\n        if (e.target.value !== 3) {\r\n            setCheckedReason(reportReasons[e.target.value]);\r\n        }\r\n    };\r\n\r\n    const onChangeInput = e => {\r\n        console.log('input', e.target.value);\r\n\r\n        if (value === 3) {\r\n            setCheckedReason(e.target.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                title=\"Report\"\r\n                visible={report.visible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n                okButtonProps={{disabled: okButtonDisabled}}\r\n            >\r\n                <p>Please Choose Your Reasons</p>\r\n                <Radio.Group class=\"radio-group\" onChange={onChange} value={value}>\r\n                    <Radio  class=\"radio-option\" value={0}>\r\n                        {reportReasons[0]}\r\n                    </Radio>\r\n                    <Radio  class=\"radio-option\" value={1}>\r\n                        {reportReasons[1]}\r\n                    </Radio>\r\n                    <Radio  class=\"radio-option\" value={2}>\r\n                        {reportReasons[2]}\r\n                    </Radio>\r\n                    <Radio  class=\"radio-option\" value={3}>\r\n                        More...\r\n                        {value === 3 ? <Input style={{ width: 100, marginLeft: 10 }} onChange={onChangeInput} /> : null}\r\n                    </Radio>\r\n                </Radio.Group>\r\n            </Modal>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ReportForm","import { Modal, Button } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport webSocket from \"../../websocket/Websocket\";\r\nimport {BAN_REPORT} from \"./constant\";\r\n\r\nconst ReportAdminForm = (props) => {\r\n    const {isReportAdminVisible, reportedReason, reportedUsername, reportedRoom} = props.reportStore;\r\n    const [visible, setVisible] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setVisible(isReportAdminVisible);\r\n    }, [props.reportStore])\r\n\r\n    const handleOk = e => {\r\n        setVisible(false);\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"ban\",\r\n                    body: {\r\n                        username: reportedUsername.trim(),\r\n                        room: reportedRoom.trim(),\r\n                        source: BAN_REPORT\r\n                    }\r\n                }\r\n            )\r\n        )\r\n    };\r\n\r\n    const handleCancel = e => {\r\n        setVisible(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                title=\"Handle Report Message\"\r\n                visible={visible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n                okText={\"Approve\"}\r\n                cancelText={\"Disapprove\"}\r\n            >\r\n                <p>Reported User: {reportedUsername}</p>\r\n                <p>{reportedReason}</p>\r\n            </Modal>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return { reportStore: state.report }\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(ReportAdminForm);","import {Menu, Button, Modal, message} from \"antd\";\r\nimport React, {useState, useMemo, useEffect} from \"react\";\r\nimport CreateRoom from \"./createRoom\";\r\nimport JoinedRoom from \"./joinedRoom\";\r\nimport ExitRoom from \"./exitRoom\";\r\nimport ExitAllRooms from \"./exitAllRooms\";\r\nimport AllRooms from \"./allRooms\";\r\nimport webSocket from \"../websocket/Websocket\";\r\nimport {connect} from \"react-redux\";\r\nimport ReportForm from \"./report/reportForm\";\r\nimport ReportAdminForm from \"./report/reportAdminForm\";\r\nimport notification from \"../notification\";\r\n\r\nconst Index = (props) => {\r\n    const {room} = props;\r\n    const [joinedRooms, setJoinedRooms] = useState([]);\r\n    const [userList, setUserList] = useState(() => [[]]);\r\n    const [allRooms, setAllRooms] = useState(() => []);\r\n    const [visible, setVisible] = useState(false);\r\n    const [userName, setUserName] = useState();\r\n    const [isPublic, setIsPublic] = useState(() => []);\r\n    const [report, setReport] = useState({visible: false, reportRoom: null, reportName: null})\r\n    const handleClick = (e) => {\r\n        if (e.key === \"create\") setVisible(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (room.msg == null) {\r\n            if (room.joinedRoom) setJoinedRooms(room.joinedRoom);\r\n            if (room.userList) setUserList(room.userList);\r\n            if (room.allRooms) setAllRooms(room.allRooms);\r\n            if (room.userName) setUserName(room.userName);\r\n            if (room.isPublic) setIsPublic(room.isPublic);\r\n\r\n        } else {\r\n            if (room.type === \"err\") notification.error(room.msg);\r\n            else if (room.type === \"info\") notification.info(room.msg);\r\n            else notification.success(room.msg);\r\n\r\n        }\r\n    }, [room])\r\n\r\n\r\n    return (\r\n        <Menu mode=\"inline\" onClick={handleClick} selectedKeys={['']} defaultOpenKeys={['allRooms', 'joinedRooms']}>\r\n            <Menu.Item key=\"create\">\r\n                <CreateRoom visible={visible} setVisible={setVisible}/>\r\n            </Menu.Item>\r\n            {/*<ExitRoom joinedRooms={joinedRooms}/>*/}\r\n            <ExitAllRooms/>\r\n            <JoinedRoom joinedRooms={joinedRooms} userList={userList} userName={userName} setReport={setReport}/>\r\n            <AllRooms allRooms={allRooms} isPublic={isPublic}/>\r\n            <ReportForm report={report} setReport={setReport}/>\r\n            <ReportAdminForm/>\r\n        </Menu>\r\n\r\n\r\n    )\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {room: state.room}\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(Index);","import {React, useState} from \"react\";\r\nimport { Modal, Input} from \"antd\";\r\nimport webSocket from \"../../websocket/Websocket\";\r\nimport {messageCensor} from \"../../../helpers/util\";\r\nimport {BAN_PRIVATEMSG} from \"../../room/report/constant\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nconst Message = (props) => {\r\n\r\n    const [value, setValue] = useState(\"\");\r\n    const {userName, visible, setVisible} = props;\r\n    const { TextArea } = Input;\r\n    const currentUser = useSelector(state => state.login.user);\r\n    const handleOk = () => {\r\n        if (!messageCensor(value)) {\r\n            webSocket.send(\r\n                JSON.stringify({\r\n                    command: \"ban\",\r\n                    body: {\r\n                        username: currentUser.trim(),\r\n                        room: null,\r\n                        source: BAN_PRIVATEMSG\r\n                    }\r\n                })\r\n            )\r\n        }\r\n        else {\r\n            webSocket.send(\r\n                JSON.stringify({\r\n                    command: \"privateMessage\",\r\n                    body: {\r\n                        name: userName,\r\n                        info: value\r\n                    }\r\n                })\r\n            )\r\n        }\r\n        setValue(\"\");\r\n        setVisible(false);\r\n    }\r\n\r\n    const onChange = ({ target: { value } }) => {\r\n        setValue(value);\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            title={`To ${userName}`}\r\n            visible={visible}\r\n            onOk={handleOk}\r\n            onCancel={() => {setValue(\"\"); setVisible(false)}}\r\n        >\r\n            <TextArea value={value}\r\n                   onChange={onChange}/>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default Message;","import {React, useState} from \"react\";\r\nimport { List, Avatar, Button } from \"antd\";\r\nimport webSocket from \"../../websocket/Websocket\";\r\nimport colorHelper from \"../../../helpers/color-user-helper\";\r\nimport Message from \"./message\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport ChatMessage from \"../chat-area/ChatMessage\";\r\n\r\n\r\nconst UserList = (props) => {\r\n\r\n    const [visible, setVisible] = useState(false);\r\n    const [userName, setUserName] = useState(\"\");\r\n\r\n\r\n    const allUsers = useSelector( state => state.userList.allUserList);\r\n    const currentUser = useSelector (state => state.login.user);\r\n    const getDisplayName = sender => {\r\n        return sender.split(\"_\").map(name => name[0]);\r\n    };\r\n    console.log(currentUser)\r\n\r\n    return (\r\n    <div>\r\n        <Message userName={userName} visible={visible} setVisible={setVisible}/>\r\n            <List\r\n                style = {{width:\"100%\", height:\"100%\",position:\"absolute\", overflow:\"auto\"}}\r\n                itemLayout=\"horizontal\"\r\n                dataSource={allUsers}\r\n                renderItem={item => (\r\n                    <List.Item style={{ padding: \"15px\" }}>\r\n                        <List.Item.Meta\r\n                            avatar={\r\n                                <Avatar\r\n                                    style={{\r\n                                        backgroundColor: colorHelper(\r\n                                            item.name\r\n                                        ),\r\n                                        verticalAlign: \"middle\"\r\n                                    }}\r\n                                    size=\"large\"\r\n                                    gap={1}\r\n                                >\r\n                                    {getDisplayName(item.name)}\r\n                                </Avatar>\r\n                            }\r\n                            description={item.name}\r\n                            title={item.school}\r\n                        />\r\n                        {item.name != currentUser?\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                size=\"small\"\r\n                                onClick={() => {setUserName(item.name); setVisible(true)}}\r\n                            >\r\n                                Chat!\r\n                            </Button>\r\n                            :   <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                size=\"small\"\r\n                                disabled = {true}\r\n                            >\r\n                                Chat!\r\n                            </Button>}\r\n\r\n\r\n                    </List.Item>\r\n                )}\r\n            />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","import { Popover, Button, Input, Space } from 'antd';\r\nimport React, {useState, useEffect} from 'react';\r\nimport { connect , useSelector} from 'react-redux';\r\nimport webSocket from \"../../websocket/Websocket\"\r\nimport notification from \"../../notification\";\r\nimport {JOIN_ROOM} from \"../../../actions/type\";\r\n\r\n\r\nconst InviteForm = (props) => {\r\n    const {selectedChatRoom, rooms} = props;\r\n    const [name, setName] = useState(\"\");\r\n    const [joinedRooms, setJoinedRooms] = useState([]);\r\n    const currentUser = useSelector(state => state.login.user);\r\n    const [visible, setVisible] = useState(false);\r\n\r\n    const hide = () => {\r\n        setVisible(false)\r\n    }\r\n\r\n\r\n\r\n    const handleVisibleChange = e => {\r\n        setVisible(e)\r\n    }\r\n\r\n    const onChange = e => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (rooms.msg == null) {\r\n            if (rooms.joinedRoom) setJoinedRooms(rooms.joinedRoom);\r\n        } else {\r\n\r\n        }\r\n    }, [rooms])\r\n\r\n    const onFinish = (room, user) => {\r\n        setVisible(false)\r\n        if (room != null && user != null) {\r\n            webSocket.send(\r\n                JSON.stringify({\r\n                    command: \"invite\",\r\n                    body: {\r\n                        currentUser: currentUser,\r\n                        inviteUserName: user,\r\n                        invitedRoom: room\r\n                    }\r\n                })\r\n            )\r\n        }\r\n    };\r\n\r\n\r\n    const content = (\r\n        <Space align=\"center\">\r\n            <Input placeholder=\"Username\" onChange={onChange}/>\r\n            <Button type=\"primary\" onClick={() => onFinish(selectedChatRoom, name)}>Invite</Button>\r\n        </Space>\r\n    );\r\n\r\n    return (\r\n\r\n        <Popover content={content} title=\"Invite your friend!\" trigger=\"click\"\r\n            visible={visible}\r\n            onVisibleChange={handleVisibleChange}\r\n        >\r\n            <Button>Invite</Button>\r\n        </Popover>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {rooms: state.room}\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(InviteForm);","import React, {useEffect, useState} from \"react\";\r\nimport {Layout, Row, Col} from \"antd\";\r\nimport {Space, Button, Popover, notification, Avatar, Drawer, List} from \"antd\";\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport ChatArea from \"./chat-area/ChatArea\";\r\nimport Room from \"../room\";\r\nimport UserList from \"./userList\";\r\nimport ReportForm from \"../room/report/reportForm\";\r\nimport ReportAdminForm from \"../room/report/reportAdminForm\";\r\nimport webSocket from \"../websocket/Websocket\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport notifications from \"../notification\";\r\nimport InviteForm from \"./inviteForm\";\r\nimport Message from \"./userList/message\";\r\nimport './index.css';\r\nimport {EXIT_ROOM, JOIN_ROOM} from \"../../actions/type\";\r\n\r\nconst {Header, Content, Footer, Sider} = Layout;\r\nconst Chat = props => {\r\n    const history = useHistory();\r\n    const {dispatch, logIn, priMsg} = props;\r\n    const selectedChatRoom = useSelector(state => state.room.currentRoom);\r\n    const [visible, setVisible] = useState(false);\r\n    const [drawer_visible, setDrawerVisible] = useState(false);\r\n    const exitDispatch = useDispatch();\r\n\r\n    const [userName, setUserName] = useState(\"\");\r\n    const userList = useSelector(state => {\r\n        if (!state.room.userList || !state.room.joinedRoom) {\r\n            return null;\r\n        }\r\n        return state.room.userList[state.room.joinedRoom.indexOf(selectedChatRoom)];\r\n    });\r\n\r\n    const currentUser = useSelector(state => state.login.user);\r\n    const allUsers = useSelector(state => state.userList.allUserList);\r\n    const profile = allUsers.find(user => user.name === currentUser);\r\n    var data;\r\n    if (profile != undefined) {\r\n        var myInterests = '';\r\n        for (var i = 0; i < profile.interest.length; i++) {\r\n            if (i > 0) {\r\n                myInterests += ', ';\r\n            }\r\n            myInterests += profile.interest[i];\r\n        }\r\n        data = [\r\n            {\r\n                title: 'Name',\r\n                description: profile.name,\r\n            },\r\n            {\r\n                title: 'Age',\r\n                description: profile.age,\r\n            },\r\n            {\r\n                title: 'School',\r\n                description: profile.school,\r\n            },\r\n            {\r\n                title: 'Interests',\r\n                description: myInterests,\r\n            },\r\n        ];\r\n    }\r\n\r\n\r\n    const mes = (description, userName) => {\r\n        return (\r\n            <div>\r\n                <div className=\"message\">\r\n                    {description}\r\n                </div>\r\n                <div className=\"message\">\r\n                    <Button onClick={() => handleReply(userName)}>Reply</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const handleReply = (userName) => {\r\n        setUserName(userName);\r\n        setVisible(true);\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setDrawerVisible(true);\r\n    };\r\n\r\n    const onClose = () => {\r\n        setDrawerVisible(false);\r\n    };\r\n\r\n    const exitRoom = () => {\r\n\r\n        return (<Button className=\"exitButton\" onClick={() => {\r\n            exitDispatch({\r\n                type: EXIT_ROOM,\r\n                payload: null\r\n            })\r\n            webSocket.send(\r\n                JSON.stringify({\r\n                        command: \"exitRoom\",\r\n                        body: {\r\n                            name: selectedChatRoom\r\n                        }\r\n                    }\r\n                )\r\n            )\r\n\r\n        }}>Exit</Button>)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (priMsg.message !== null) {\r\n            notification.info({\r\n                message: `${priMsg.sender} sends you a message`,\r\n                description: mes(priMsg.message.info, priMsg.sender),\r\n                duration: 5,\r\n                styles: {paddingTop: '10px'}\r\n            });\r\n        } else if (priMsg.feedback !== null) {\r\n            if (priMsg.feedback.indexOf(\"Sorry\") < 0) {\r\n                notifications.success(priMsg.feedback);\r\n            } else {\r\n                notifications.error(priMsg.feedback);\r\n            }\r\n        }\r\n    }, [priMsg]);\r\n\r\n    return (\r\n        <Layout style={{height: \"100vh\"}}>\r\n            <Message userName={userName} visible={visible} setVisible={setVisible}/>\r\n            <Sider width=\"300px\" theme=\"light\" style={{overflowY: 'auto'}}>\r\n                <Room/>\r\n            </Sider>\r\n            <Layout style={{overFlow: \"hidden\"}}>\r\n                <Header\r\n                    style={{\r\n                        padding: 0,\r\n                        backgroundColor: \"white\",\r\n                        //borderLeft: \"2px solid rgba(0, 0, 0, 0.06)\"\r\n                    }}\r\n                >\r\n                    {selectedChatRoom && (\r\n                        <span\r\n                            id={\"chat-area-header-room-name\"}\r\n                            style={{fontSize: \"larger\", fontWeight: \"bolder\"}}\r\n                        >\r\n              {selectedChatRoom || \"\"}\r\n            </span>\r\n                    )}\r\n                    {selectedChatRoom && (\r\n                        <span\r\n                            id={\"chat-area-header-user-count\"}\r\n                            style={{fontSize: \"medium\", marginLeft: \"20px\"}}\r\n                        >\r\n              {(userList && `(${userList.length})`) || \"\"}\r\n            </span>\r\n                    )}\r\n                    <Space style={{float: 'right'}}\r\n                           size=\"middle\">\r\n                        <div>\r\n\r\n                            {selectedChatRoom != null ? <> {exitRoom()}<InviteForm\r\n                                selectedChatRoom={selectedChatRoom}/> </> : null}\r\n                        </div>\r\n\r\n\r\n                        <Button type=\"primary\" shape=\"circle\" icon={<UserOutlined/>} onClick={showDrawer}/>\r\n                        <Drawer\r\n                            title=\"User Profile\"\r\n                            placement=\"left\"\r\n                            closable={false}\r\n                            onClose={onClose}\r\n                            visible={drawer_visible}\r\n                        >\r\n                            <List\r\n                                itemLayout=\"horizontal\"\r\n                                dataSource={data}\r\n                                renderItem={item => (\r\n                                    <List.Item>\r\n                                        <List.Item.Meta\r\n                                            title={item.title}\r\n                                            description={item.description}\r\n                                        />\r\n                                    </List.Item>\r\n                                )}\r\n                            />\r\n\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                size=\"small\"\r\n                                onClick={() => {\r\n                                    webSocket.send(\r\n                                        JSON.stringify({\r\n                                            command: \"logout\",\r\n                                            body: {}\r\n                                        })\r\n                                    );\r\n                                }}\r\n                            >\r\n                                Logout\r\n                            </Button>\r\n\r\n                        </Drawer>\r\n\r\n                    </Space>\r\n                </Header>\r\n                <Content style={{margin: \"24px 16px 0\"}}>\r\n                    <Row style={{height: \"100%\"}}>\r\n                        <Col span={17}>\r\n                            <div\r\n                                className=\"site-layout-background\"\r\n                                style={{minHeight: 360, height: \"100%\"}}\r\n                            >\r\n                                {selectedChatRoom && <ChatArea chatRoom={selectedChatRoom}/>}\r\n                            </div>\r\n                        </Col>\r\n                        <Col\r\n                            span={7}\r\n                            style={{borderLeft: \"2px solid rgba(0, 0, 0, 0.06)\"}}\r\n                        >\r\n                            {UserList()}\r\n                            {/*{ReportForm()}*/}\r\n                        </Col>\r\n                    </Row>\r\n                </Content>\r\n                {/*TEMP FOR Report*/}\r\n                {/*<ReportAdminForm report={report}/>*/}\r\n                <Footer style={{textAlign: \"center\"}}>\r\n                    Chat App ©2020 Created by Sammy the Owl\r\n                </Footer>\r\n            </Layout>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {logIn: state.login, priMsg: state.priMessage};\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(Chat);\r\n","import {message} from 'antd';\r\nimport {SIGN_IN, SIGN_OUT, ON_MESSAGE, CREATE_ROOM, RESET, ROOM, ON_REPORT, PRI_MESSAGE, SETALLUSERS} from './type';\r\n\r\nvar mesId = 0;\r\n\r\nexport const onMessage = (messages) =>\r\n    dispatch => {\r\n        const data = JSON.parse(messages.data);\r\n        switch (data.section) {\r\n            case \"login\":\r\n                if (data.type === \"err\") {\r\n                    dispatch({type: SIGN_IN, payload: {mesId: mesId++, isSignedIn: false, user: null, msg: data.msg}});\r\n                } else {\r\n                    dispatch({\r\n                        type: SIGN_IN,\r\n                        payload: {mesId: mesId++, isSignedIn: true, user: data.msg, msg: data.msg}\r\n                    });\r\n                }\r\n                break;\r\n            case \"logout\":\r\n                dispatch({type: SIGN_OUT, payload: {mesId: mesId++, isSignedIn: false, user: null, msg: data.msg}});\r\n                break;\r\n            case \"room\":\r\n                dispatch({\r\n                    type: ROOM,\r\n                    payload: {\r\n                        request: data.request,\r\n                        type: data.type,\r\n                        msg: data.msg,\r\n                        param1: data.param1,\r\n                        param2: data.param2,\r\n                        param3: data.param3,\r\n                        param4: data.param4,\r\n                        param5: data.param5\r\n                    }\r\n                });\r\n                break;\r\n            case \"report\":\r\n                const body = JSON.parse(data.msg);\r\n                dispatch({\r\n                    type: ON_REPORT,\r\n                    payload: {\r\n                        reportedUsername: body.reportedUsername,\r\n                        reportedReason: body.reportedReason,\r\n                        reportedRoom: body.reportedRoom\r\n                    }\r\n                });\r\n                break;\r\n            case \"message\":\r\n                const type = data.request;\r\n                const payload = JSON.parse(data.msg);\r\n                dispatch({ type, payload});\r\n                break;\r\n            case \"privateMessage\":\r\n                if(data.request === \"priMsg_feedback\") {\r\n                    dispatch({type: PRI_MESSAGE, payload: null, sender: null, feedback: data.msg});\r\n                    break;\r\n                }\r\n                const sender = data.request;\r\n                //const payload = JSON.parse(data.msg);\r\n                dispatch({type: PRI_MESSAGE, payload: JSON.parse(data.msg), sender: sender, feedback: null});\r\n                break;\r\n            case \"setallusers\":\r\n                dispatch({\r\n                    type: SETALLUSERS,\r\n                    payload: JSON.parse(data.msg)\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport {connect} from \"react-redux\";\r\nimport {message} from \"antd\";\r\n\r\nconst PrivateRoute = ({component: Component, ...props}) => {\r\n    return <Route {...props} render={() => {\r\n        const login = props.logInStore.isSignedIn;\r\n        if (login){\r\n            return <Component />\r\n        } else {\r\n            return <Redirect to={{\r\n                pathname: '/'\r\n            }}/>\r\n        }\r\n    }}/>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { logInStore: state.login }\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(PrivateRoute);\r\n","import './App.css';\r\nimport React ,{useRef} from 'react'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport Login from './components/login/login'\r\nimport Chat from './components/chat/index'\r\nimport { createBrowserHistory } from 'history'\r\nimport { useEffect } from 'react/cjs/react.production.min'\r\nimport webSocket from \"./components/websocket/Websocket\"\r\nimport { onMessage } from './actions/index'\r\nimport { connect } from 'react-redux'\r\nimport {Modal} from \"antd\";\r\nimport PrivateRoute from \"./auth/privateRoute\";\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst App = (props) => {\r\n    const {dispatch, message} = props;\r\n\r\n    webSocket.onopen = () => {\r\n      console.log(\"connected\");\r\n    }\r\n\r\n    webSocket.onmessage = (message) => {\r\n      console.log(message);\r\n      props.onMessage(message);\r\n    }\r\n\r\n    webSocket.onclose = () => {\r\n        Modal.error({content: \"Websocket disconnected, please reenter the chat app\"});\r\n    }\r\n\r\n    return (\r\n    <div className=\"App\">\r\n       <Router history={history}>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Login} />\r\n          <PrivateRoute path=\"/chat\" exact component={Chat}/>\r\n          {/*<Route path=\"/chat\" exact component={Chat}/>*/}\r\n        </Switch>\r\n      </Router> \r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return { message: state.message }\r\n};\r\n\r\nexport default connect(mapStateToProps, { onMessage })(App);\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { SIGN_IN, SIGN_OUT } from '../actions/type';\r\nimport userEvent from \"@testing-library/user-event\";\r\n\r\nconst INTIAL_STATE = {\r\n  isSignedIn: null,\r\n  user: null,\r\n  mesId: 0,\r\n  msg: null\r\n};\r\n\r\nexport default (state = INTIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      if (action.payload.isSignedIn === true)\r\n        return { ...state, isSignedIn: true, user: action.payload.user, mesId: action.payload.mesId, msg: action.payload.msg };\r\n      else\r\n        return { ...state, isSignedIn: false, user: null, mesId: action.payload.mesId, msg: action.payload.msg};\r\n    case SIGN_OUT:\r\n      return { ...state, isSignedIn: null, user: null, mesId: action.payload.mesId, msg: action.payload.msg };\r\n    default:\r\n      return state;\r\n  }\r\n};","import {\r\n  ON_MESSAGE,\r\n  DELETE_MESSAGE,\r\n  EDIT_MESSAGE,\r\n  RECALL_MESSAGE\r\n} from \"../actions/type\";\r\n\r\nconst INITIAL_STATE = {\r\n  messages: {}\r\n};\r\n\r\nexport default function (state = INITIAL_STATE, action)  {\r\n  switch (action.type) {\r\n    case ON_MESSAGE: {\r\n      const { messages } = state;\r\n      const { id, text, time, sender, chatRoom, received } = action.payload;\r\n      if (!messages[chatRoom]) {\r\n        messages[chatRoom] = [];\r\n      }\r\n      messages[chatRoom].push({\r\n        id,\r\n        text,\r\n        time,\r\n        sender,\r\n        received\r\n      });\r\n      return { ...state, messages: { ...messages } };\r\n    }\r\n    case DELETE_MESSAGE: {\r\n      const { messages } = state;\r\n      const { messageId, chatRoom } = action.payload;\r\n      const newChatRoomMessages = messages[chatRoom].filter(\r\n        m => m.id !== messageId\r\n      );\r\n      const newMessages = { ...messages };\r\n      newMessages[chatRoom] = newChatRoomMessages;\r\n      return {\r\n        ...state,\r\n        messages: newMessages\r\n      };\r\n    }\r\n    case RECALL_MESSAGE: {\r\n      const { messages } = state;\r\n      const { messageId, chatRoom, recallTime } = action.payload;\r\n      const newChatRoomMessages = messages[chatRoom].map(m => {\r\n        if (m.id === messageId) {\r\n          m.isRecalled = true;\r\n          m.recallTime = recallTime;\r\n          m.text = \"\";\r\n        }\r\n        return m;\r\n      });\r\n      const newMessages = { ...messages };\r\n      newMessages[chatRoom] = newChatRoomMessages;\r\n      return {\r\n        ...state,\r\n        messages: newMessages\r\n      };\r\n    }\r\n    case EDIT_MESSAGE: {\r\n      const { messages } = state;\r\n      const { messageId, chatRoom, editedText } = action.payload;\r\n      const newChatRoomMessages = messages[chatRoom].map(m => {\r\n        if (m.id === messageId) {\r\n          m.text = editedText;\r\n        }\r\n        return m;\r\n      });\r\n      const newMessages = { ...messages };\r\n      newMessages[chatRoom] = newChatRoomMessages;\r\n      return {\r\n        ...state,\r\n        messages: newMessages\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { SETALLUSERS } from '../actions/type';\r\n\r\nconst INITIAL_STATE = {\r\n  allUserList : []\r\n}\r\n\r\n\r\nexport default (state =  INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case SETALLUSERS:\r\n      console.log(action.payload)\r\n      return {...state, allUserList: action.payload}\r\n    default:\r\n      return state;\r\n  }\r\n}","import {ROOM, JOIN_ROOM, EXIT_ROOM} from \"../actions/type\";\r\nimport {act} from \"@testing-library/react\";\r\n\r\nconst INTIAL_STATE = {\r\n    request: null,\r\n    type: null,\r\n    msg: null,\r\n    currentRoom: null,\r\n    joinedRoom:[],\r\n    userList: [[]],\r\n    allRooms: [],\r\n    isPublic: []\r\n};\r\n\r\nexport default (state = INTIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case ROOM:\r\n           let selectedRoom = state.currentRoom;\r\n           if(action.payload.param1 === \"[]\") selectedRoom = null;\r\n            return {\r\n                request: action.payload.request,\r\n                type: action.payload.type,\r\n                msg: action.payload.msg,\r\n                joinedRoom: parse(action.payload.param1) || state.joinedRoom,\r\n                userList: parseNestedList(action.payload.param1, action.payload.param2) || state.userList,\r\n                allRooms: parse(action.payload.param3) || state.allRooms,\r\n                userName: action.payload.param4 || state.userName,\r\n                isPublic: parse(action.payload.param5) || state.isPublic,\r\n                currentRoom: selectedRoom\r\n            };\r\n        case JOIN_ROOM: {\r\n            return {\r\n                ...state,\r\n                msg: null,\r\n                currentRoom: action.payload\r\n            }\r\n        }\r\n        case EXIT_ROOM:{\r\n            return {\r\n                ...state,\r\n                msg:null,\r\n                currentRoom: action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst parse = (value)=>{\r\n    if (value) {\r\n        if(value === \"[]\") return [];\r\n        let v = value.substring(1, value.length - 1);\r\n        return v.split(\", \");\r\n    }\r\n    return null;\r\n}\r\n\r\nconst parseNestedList = (param1, value) =>{\r\n    if(value) {\r\n        if(value === \"[]\") return [];\r\n        let length = parse(param1).length;\r\n        let list = []\r\n        let v = value.substring(1, value.length - 1)\r\n        for(let i = 0; i < length; i++){\r\n            let start = v.indexOf(\"[\");\r\n            let end = v.indexOf(\"]\");\r\n            let ele = v.substring(start + 1, end).split(\", \");\r\n            list.push(ele);\r\n            v = v.substring(end + 1);\r\n        }\r\n        return list;\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n","import {ON_REPORT} from '../actions/type';\r\n\r\nconst INITIAL_STATE = {\r\n    isReportAdminVisible: false,\r\n    reportedUsername:\"\",\r\n    reportedReason: \"\",\r\n    reportedRoom:\"\"\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case ON_REPORT:\r\n            return { ...state, isReportAdminVisible: true, reportedReason: action.payload.reportedReason,\r\n                reportedUsername: action.payload.reportedUsername, reportedRoom: action.payload.reportedRoom};\r\n        default:\r\n            return state;\r\n    }\r\n};","import {PRI_MESSAGE, RESET, SIGN_OUT} from '../actions/type';\r\nimport userEvent from \"@testing-library/user-event\";\r\n\r\nconst INTIAL_STATE = {\r\n    message: null,\r\n    sender: null,\r\n    feedback: null\r\n};\r\n\r\nexport default (state = INTIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case PRI_MESSAGE:\r\n            return { ...state, sender: action.sender, message: action.payload, feedback: action.feedback };\r\n        case SIGN_OUT:\r\n            return {...state, ...INTIAL_STATE};\r\n        default:\r\n            return state;\r\n    }\r\n};","import { message } from 'antd';\r\nimport { combineReducers } from 'redux';\r\nimport loginReducer from './loginReducer';\r\nimport messageReducer from './messageReducer';\r\nimport userListReducer from './userListReducer';\r\nimport roomReducer from \"./roomReducer\";\r\nimport reportReducer from \"./reportReducer\";\r\nimport priMessageReducer from \"./priMessageReducer\";\r\n\r\n\r\nexport default combineReducers({\r\n  login: loginReducer,\r\n  message: messageReducer,\r\n  userList: userListReducer,\r\n  room: roomReducer,\r\n  report: reportReducer,\r\n  priMessage: priMessageReducer\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, /* preloadedState, */ composeEnhancers(applyMiddleware(reduxThunk)));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}