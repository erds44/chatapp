{"version":3,"sources":["components/websocket/Websocket.js","components/notification/index.js","components/login/login.js","helpers/color-user-helper.js","actions/type.js","components/room/report/constant.js","components/chat/chat-area/ChatMessage.js","helpers/util.js","components/chat/chat-area/ChatMessages.js","components/chat/chat-area/Compose.js","components/chat/chat-area/ChatArea.js","components/room/createRoom.js","components/room/joinedRoom.js","components/room/exitRoom.js","components/room/exitAllRooms.js","components/room/allRooms.js","components/room/report/reportForm.js","components/room/report/reportAdminForm.js","components/room/index.js","components/chat/userList/message.js","components/chat/userList/index.js","components/chat/inviteForm/index.js","components/chat/index.js","actions/index.js","auth/privateRoute.js","App.js","reportWebVitals.js","reducers/loginReducer.js","reducers/messageReducer.js","reducers/userListReducer.js","reducers/roomReducer.js","reducers/reportReducer.js","reducers/priMessageReducer.js","reducers/index.js","index.js"],"names":["webSocket","WebSocket","message","config","duration","maxCount","notification","info","text","content","success","error","warn","layout","labelCol","span","wrapperCol","validateMessages","required","connect","state","ownProps","logIn","login","props","history","useHistory","Option","Select","interests","schools","interest_string_list","school_string_list","dispatch","Form","useForm","form","i","validateFields","length","push","value","useEffect","isSignedIn","title","style","width","margin","headStyle","fontSize","backgroundColor","bodyStyle","name","onFinish","values","send","JSON","stringify","command","body","user","age","school","align","Item","label","QuestionCircleOutlined","rules","pattern","placeholder","min","max","textAlign","allowClear","mode","offset","type","htmlType","size","COLORS","copyCOLORS","COLOR_ASSIGNS","assignColors","id","color","shift","getAColor","SIGN_IN","SIGN_OUT","ON_MESSAGE","DELETE_MESSAGE","EDIT_MESSAGE","RECALL_MESSAGE","ON_MESSAGE_ERR","ROOM","JOIN_ROOM","ON_REPORT","PRI_MESSAGE","SETALLUSERS","EXIT_ROOM","reportReasons","BAN_BROADCAST","ChatMessage","onClickEdit","useDispatch","messageId","time","sender","isRecalled","recallTime","received","currentUser","useSelector","chatRoom","room","currentRoom","roomAdmin","userList","joinedRoom","indexOf","isOwnMessage","isAdmin","isAdminMessage","menu","onClick","event","key","payload","Date","getTime","getOperationsForMessage","map","operation","className","colorHelper","verticalAlign","gap","split","getDisplayName","onMouseEnter","dropDownElement","document","getElementById","visibility","opacity","onMouseLeave","moment","format","getRecallText","matchers","UrlMatcher","overlay","placement","messageCensor","toLowerCase","includes","TextArea","Input","ChatMessages","inputMessages","useState","modalVisible","setModalVisible","messageToEdit","setMessageToEdit","handleModalOK","editMessageTextArea","editedText","username","trim","source","handleClickEdit","visible","onOk","onCancel","rows","showCount","defaultValue","onPressEnter","Compose","textAreaText","setTextAreaText","err_msg","handleMessageSend","preventDefault","sendMessage","uuid","showEmojiPicker","setshowEmojiPicker","set","perLine","include","onSelect","emoji","native","onChange","target","float","trigger","onVisibleChange","SmileOutlined","Content","Layout","Footer","ChatArea","Header","messages","chatAreaContent","querySelector","scrollTop","scrollHeight","clientHeight","CreateRoom","setVisible","interestDisabled","setInterestDisabled","interest","isPrivate","switch","outerWidth","valuePropName","prevState","disabled","PlusCircleOutlined","SubMenu","Menu","JoinedRoom","keyId","joinedRooms","userName","setReport","getRemoveButton","roomName","admin","marginLeft","ghost","shape","forceToLeave","reportRoom","reportName","getBlockButton","block","handleSelectedRoom","selectedKeys","defaultOpenKeys","GroupOutlined","index","onTitleClick","tag","ExitAllRooms","CloseCircleOutlined","AllRooms","allRooms","isPublic","e","LockOutlined","ReportForm","undefined","setValue","checkedReason","setCheckedReason","okButtonDisabled","setOkButtonDisabled","report","reportedUsername","reportedReason","reportedRoom","okButtonProps","Group","class","reportStore","isReportAdminVisible","okText","cancelText","setJoinedRooms","setUserList","setAllRooms","setUserName","setIsPublic","msg","setInterval","Message","UserList","allUsers","allUserList","height","position","overflow","itemLayout","dataSource","renderItem","item","padding","Meta","avatar","description","rooms","selectedChatRoom","setName","inviteUserName","invitedRoom","Sider","priMsg","priMessage","data","drawer_visible","setDrawerVisible","exitDispatch","profile","find","myInterests","mes","handleReply","styles","paddingTop","feedback","notifications","theme","overflowY","overFlow","fontWeight","icon","UserOutlined","closable","onClose","minHeight","borderLeft","mesId","logInStore","Component","component","render","to","pathname","createBrowserHistory","onMessage","parse","section","request","param1","param2","param3","param4","param5","onopen","onmessage","onclose","Modal","path","exact","Login","Chat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INTIAL_STATE","INITIAL_STATE","substring","parseNestedList","list","v","start","end","ele","combineReducers","action","newChatRoomMessages","filter","m","newMessages","selectedRoom","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM"],"mappings":"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","file":"static/js/main.581ea97d.chunk.js","sourcesContent":["\r\nconst webSocket = new WebSocket(\"wss://chatapp-team-sammytheowl.herokuapp.com/chatapp\")\r\n// const webSocket = new WebSocket(\"ws://localhost:4567/chatapp\")\r\nexport default webSocket;\r\n\r\n\r\n\r\n\r\n","import { message } from \"antd\";\r\n\r\nmessage.config({\r\n  duration: 3,\r\n  maxCount: 5\r\n});\r\n\r\nconst notification = {\r\n  info: (text) => {\r\n    message.info({ content: text }, 5);\r\n  },\r\n  success: text => {\r\n    message.success({ content: text }, 5);\r\n  },\r\n  error: text => {\r\n    message.error({ content: text }, 5);\r\n  },\r\n  warn: text => {\r\n    message.warn({ content: text }, 5);\r\n  }\r\n};\r\n\r\nexport default notification;\r\n","import {React, useEffect, useState} from 'react'\r\nimport {Card, Form, Input, message, Button, Select, Modal, InputNumber, Tooltip} from 'antd'\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nimport {useHistory} from 'react-router-dom'\r\nimport webSocket from \"../websocket/Websocket\"\r\nimport { connect } from 'react-redux'\r\nimport notification from \"../notification\";\r\n\r\n\r\nconst layout = {\r\n    labelCol: {span: 4},\r\n    wrapperCol: {span: 20},\r\n};\r\n\r\nconst validateMessages = {\r\n    required: '${label} is required!'\r\n};\r\n\r\nconst Login = (props) => {\r\n\r\n    const history = useHistory();\r\n    const {Option} = Select;\r\n    const interests = [];\r\n    const schools = [];\r\n    const interest_string_list = [\"Traveling\", \"Reading\", \"Music\", \"Sports\", \"Movies\", \"Games\"];\r\n    const school_string_list = [\"Rice University\", \"Duke University\", \"USC\", \"UCLA\", \"New York University\", \"Other\"];\r\n    const {dispatch, logIn} = props;\r\n    const [form] = Form.useForm();\r\n    const {validateFields} = form;\r\n    // const ss=[{value:'a', label:'a'}]\r\n\r\n    for (let i = 0; i < school_string_list.length; i++) {\r\n        schools.push(<Option value={school_string_list[i]}>{school_string_list[i]}</Option>);\r\n    }\r\n\r\n    for (let i = 0; i < interest_string_list.length; i++) {\r\n        interests.push(<Option value={interest_string_list[i]}>{interest_string_list[i]}</Option>);\r\n    }\r\n\r\n    const onFinish = values => {\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                command: \"login\",\r\n                body: {\r\n                    name: values.user.name,\r\n                    age: values.user.age,\r\n                    school: values.user.school,\r\n                    interests: values.user.interests\r\n                }\r\n            })\r\n        )\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(logIn) {\r\n            if (logIn.isSignedIn !== null) {\r\n                if (logIn.isSignedIn === true) {\r\n                    history.push('/chat');\r\n                } else {\r\n                    notification.error(\"The username already exists. Please choose another one!\");\r\n                }\r\n            }\r\n        }\r\n    }, [logIn])\r\n\r\n    return (\r\n        <Card title=\"Login Chat Room\" style={{width: '600px', margin: '80px auto'}}\r\n              headStyle={{fontSize: '30px', backgroundColor: '#d9d9d9'}}\r\n              bodyStyle={{backgroundColor: '#f5f5f5'}}>\r\n            <Form {...layout} name=\"LoginForm\" form={form} onFinish={onFinish} validateMessages={validateMessages} align=\"left\">\r\n                <Form.Item\r\n                    name={['user', 'name']}\r\n                    label={\r\n                        <span>\r\n                            Name&nbsp;\r\n                            <Tooltip title=\"5-20 alphanumeric characters or underscores\">\r\n                                <QuestionCircleOutlined />\r\n                            </Tooltip>\r\n                        </span>\r\n                    }\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Name is required!',\r\n                        },\r\n                        {\r\n                            pattern: /^[a-zA-Z0-9_]{5,20}$/,\r\n                            message: 'Name should be 5-20 alphanumeric characters or underscores',\r\n                        },\r\n                    ]}>\r\n                    <Input placeholder=\"Your Name\"/>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={['user', 'age']} label=\"Age\" rules={[{required: true}]}>\r\n                    <InputNumber min={0} max={200}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={['user', 'school']} label=\"School\" rules={[{required: true}]}>\r\n                    <Select style={{width: '100%', textAlign: 'left'}}\r\n                            allowClear\r\n                            placeholder=\"Please select your school\">{schools}</Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name={['user', 'interests']} label=\"Interests\" rules={[{required: true}]}>\r\n                    <Select mode=\"multiple\"\r\n                            allowClear\r\n                            style={{width: '100%', textAlign: 'left'}}\r\n                            placeholder=\"Please select your interests\">{interests}</Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{...layout.wrapperCol, offset: 20}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\" >\r\n                        Login\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Card>\r\n\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return { logIn: state.login }\r\n  };\r\n\r\nexport default connect(mapStateToProps, {})(Login);","const FLAT_BLUE = '#355ca9';\r\nconst DEEP_LAVENDER = '#8665b6';\r\nconst AZURE = '#2196f2';\r\nconst COOL_BLUE = '#5571bc';\r\nconst ORANGE_RED = '#fe5722';\r\nconst SLATE = '#43555f';\r\nconst TEAL = '#009688';\r\nconst MARIGOLD = '#febf0a';\r\nconst PINK = '#e81f63';\r\nconst AZURE_TWO = '#06a9f3';\r\nconst TURQUOISE_BLUE = '#03bcd3';\r\nconst TANGERINE = '#fe9800';\r\nconst SUNSHINE_YELLOW = '#feea3b';\r\nconst SICKLY_YELLOW = '#ccdb3a';\r\nconst GREEN = '#8bc24b';\r\nconst MID_GREEN = '#4baf50';\r\nconst VIRIDIAN = '#22828d';\r\nconst FRENCH_BLUE = '#3f51b5';\r\nconst BARNEY = '#9c26b0';\r\nconst BLUEY_PURPLE = '#673ab7';\r\nconst BLUE_GREY = '#607d8b';\r\nconst WARM_GREY = '#9e9e9e';\r\nconst DARK_TAUPE = '#795548';\r\n\r\nconst COLORS = [\r\n    FLAT_BLUE,\r\n    AZURE,\r\n    COOL_BLUE,\r\n    ORANGE_RED,\r\n    SLATE,\r\n    DEEP_LAVENDER,\r\n    TEAL,\r\n    MARIGOLD,\r\n    PINK,\r\n    AZURE_TWO,\r\n    TURQUOISE_BLUE,\r\n    TANGERINE,\r\n    SUNSHINE_YELLOW,\r\n    SICKLY_YELLOW,\r\n    GREEN,\r\n    MID_GREEN,\r\n    VIRIDIAN,\r\n    FRENCH_BLUE,\r\n    BARNEY,\r\n    BLUEY_PURPLE,\r\n    BLUE_GREY,\r\n    WARM_GREY,\r\n    DARK_TAUPE,\r\n];\r\nlet copyCOLORS = [\r\n    ...COLORS,\r\n];\r\n\r\nconst getAColor = () => {\r\n    let color = copyCOLORS.shift();\r\n    if (!color) {\r\n        copyCOLORS = [\r\n            ...COLORS,\r\n        ];\r\n        color = copyCOLORS.shift();\r\n    }\r\n    return color;\r\n};\r\n\r\nconst COLOR_ASSIGNS = {};\r\nconst assignColors = (id) => {\r\n    if (!COLOR_ASSIGNS[id]) {\r\n        COLOR_ASSIGNS[id] = getAColor();\r\n    }\r\n    return COLOR_ASSIGNS[id];\r\n};\r\nexport default assignColors;\r\n","export const SIGN_IN = 'SIGN_IN';\r\nexport const SIGN_OUT = 'SIGN_OUT';\r\n\r\nexport const ON_MESSAGE = 'ON_MESSAGE';\r\nexport const DELETE_MESSAGE = 'DELETE_MESSAGE';\r\nexport const EDIT_MESSAGE = 'EDIT_MESSAGE';\r\nexport const RECALL_MESSAGE = 'RECALL_MESSAGE';\r\nexport const ON_MESSAGE_ERR = 'ON_MESSAGE_ERR';\r\n\r\nexport const ROOM = 'ROOM';\r\nexport const JOIN_ROOM = 'JOIN_ROOM';\r\n\r\nexport const ON_REPORT = 'ON_REPORT';\r\nexport const BAN = 'BAN';\r\n\r\nexport const PRI_MESSAGE = 'PRI_MESSAGE';\r\n\r\nexport const RESET = 'RESET';\r\nexport const SETALLUSERS = 'SETALLUSERS';\r\nexport const EXIT_ROOM = 'EXIT_ROOM';","export const reportReasons = [\"Sexual Content\", \"Violent or repulsive content\", \"Spam or misleading\"];\r\nexport const BAN_BROADCAST = \"broadcast\";\r\nexport const BAN_PRIVATEMSG = \"privateMsg\";\r\nexport const BAN_REPORT = \"report\";","import React from \"react\";\r\nimport { Row, Col, Menu, Dropdown, Button, Avatar } from \"antd\";\r\nimport moment from \"moment\";\r\nimport \"./ChatMessage.css\";\r\nimport colorHelper from \"../../../helpers/color-user-helper\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  DELETE_MESSAGE,\r\n  RECALL_MESSAGE,\r\n  EDIT_MESSAGE\r\n} from \"../../../actions/type\";\r\nimport webSocket from \"../../websocket/Websocket\";\r\nimport { BAN_BROADCAST } from \"../../room/report/constant\";\r\nimport Interweave from 'interweave';\r\nimport { UrlMatcher } from 'interweave-autolink';\r\n\r\nconst ChatMessage = ({ message, onClickEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    id: messageId,\r\n    text,\r\n    time,\r\n    sender,\r\n    isRecalled,\r\n    recallTime,\r\n    received\r\n  } = message;\r\n\r\n  const currentUser = useSelector(state => state.login.user);\r\n  const chatRoom = useSelector(state => state.room.currentRoom);\r\n  const userList = useSelector(state => state.room.userList);\r\n  const roomState = useSelector(state => state.room);\r\n  const roomAdmin = useSelector(state => {\r\n    if (!state.room.userList || !state.room.joinedRoom || !state.room.userList[state.room.joinedRoom.indexOf(chatRoom)]) {\r\n      return null;\r\n    }\r\n    return state.room.userList[state.room.joinedRoom.indexOf(chatRoom)][0];\r\n  });\r\n  const isOwnMessage = currentUser === message.sender;\r\n  const isAdmin = currentUser === roomAdmin;\r\n  const isAdminMessage = sender === roomAdmin;\r\n  const getOperationsForMessage = (isAdmin, isOwnMessage) => {\r\n    if (isOwnMessage) {\r\n      return [\"edit\", \"delete\", \"recall\"];\r\n    }\r\n    if (isAdmin) {\r\n      return [\"delete\"];\r\n    }\r\n    return [];\r\n  };\r\n  const handleMenuClick = event => {\r\n    if (!event || !event.key) {\r\n      return;\r\n    }\r\n    switch (event.key) {\r\n      case \"edit\": {\r\n        onClickEdit(message);\r\n        break;\r\n      }\r\n      case \"delete\": {\r\n        dispatch({\r\n          type: DELETE_MESSAGE,\r\n          payload: {\r\n            messageId,\r\n            chatRoom\r\n          }\r\n        });\r\n        webSocket.send(\r\n          JSON.stringify({\r\n            command: \"deleteMessage\",\r\n            body: {\r\n              messageId,\r\n              chatRoom\r\n            }\r\n          })\r\n        );\r\n        break;\r\n      }\r\n      case \"recall\": {\r\n        dispatch({\r\n          type: RECALL_MESSAGE,\r\n          payload: {\r\n            messageId,\r\n            chatRoom\r\n          }\r\n        });\r\n        webSocket.send(\r\n          JSON.stringify({\r\n            command: \"recallMessage\",\r\n            body: {\r\n              messageId,\r\n              chatRoom,\r\n              recallTime: new Date().getTime()\r\n            }\r\n          })\r\n        );\r\n        break;\r\n      }\r\n    }\r\n  };\r\n  const menu = (\r\n    <Menu onClick={handleMenuClick}>\r\n      {getOperationsForMessage(isAdmin, isOwnMessage).map(operation => {\r\n        return <Menu.Item key={operation}>{operation}</Menu.Item>;\r\n      })}\r\n    </Menu>\r\n  );\r\n\r\n  const handleMouseEnter = () => {\r\n    const dropDownElement = document.getElementById(`${messageId}-dropdown`);\r\n    if (!dropDownElement) {\r\n      return;\r\n    }\r\n    dropDownElement.style.visibility = \"visible\";\r\n    dropDownElement.style.opacity = \"1\";\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    const dropDownElement = document.getElementById(`${messageId}-dropdown`);\r\n    if (!dropDownElement) {\r\n      return;\r\n    }\r\n    dropDownElement.style.visibility = \"hidden\";\r\n    dropDownElement.style.opacity = \"0\";\r\n  };\r\n\r\n  const getDisplayName = sender => {\r\n    return sender.split(\"_\").map(name => name[0]);\r\n  };\r\n\r\n  const getRecallText = (sender, recallTime) => {\r\n    return `******* This message was recalled at ${moment(recallTime).format(\r\n      \"MMM DD hh:mm\"\r\n    )} *******`;\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col span={1} className=\"avatar-container\">\r\n        <Avatar\r\n          style={{\r\n            backgroundColor: colorHelper(sender),\r\n            verticalAlign: \"middle\"\r\n          }}\r\n          size=\"large\"\r\n          gap={1}\r\n        >\r\n          {getDisplayName(sender)}\r\n        </Avatar>\r\n      </Col>\r\n      <Col span={23}>\r\n        <Row\r\n          className={`${messageId ?? \"\"} message-wrapper`}\r\n          onMouseEnter={handleMouseEnter}\r\n          onMouseLeave={handleMouseLeave}\r\n        >\r\n          <Col span={22}>\r\n            <Row className=\"message-header\">\r\n              <Col className=\"message-sender\">\r\n                {(isOwnMessage && \"ME\") || sender}{\" \"}\r\n                {isAdminMessage && \" (admin)\"}\r\n              </Col>\r\n              <Col className=\"message-time\">\r\n                {!isRecalled && moment(time).format(\"ddd MMM DD hh:mm:ss\")}\r\n                {received && \" (received)\"}\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col className=\"message-text\">\r\n                <Interweave\r\n                    content={(!isRecalled && text) || getRecallText(sender, recallTime)}\r\n                    matchers={[new UrlMatcher('url')]}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n          <Col\r\n            span={2}\r\n            id={`${messageId}-dropdown`}\r\n            className={\"message-dropdown\"}\r\n          >\r\n            {!isRecalled && (isOwnMessage || isAdmin) && (\r\n              <Dropdown overlay={menu} placement=\"bottomLeft\">\r\n                <Button>...</Button>\r\n              </Dropdown>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\nexport default ChatMessage;\r\n","export const messageCensor = (content) => {\r\n    return !content.toLowerCase().includes(\"hate\");\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Row, Input, Modal } from \"antd\";\r\nimport ChatMessage from \"./ChatMessage\";\r\nimport \"./ChatMessages.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { EDIT_MESSAGE } from \"../../../actions/type\";\r\nimport webSocket from \"../../websocket/Websocket\";\r\nimport {messageCensor} from \"../../../helpers/util\";\r\nimport {BAN_BROADCAST} from \"../../room/report/constant\";\r\nconst { TextArea } = Input;\r\n\r\nconst ChatMessages = ({ inputMessages }) => {\r\n  const dispatch = useDispatch();\r\n  const currentUser = useSelector(state => state.login.user);\r\n  const currentRoom = useSelector(state => state.room.currentRoom);\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [messageToEdit, setMessageToEdit] = useState(\"\");\r\n\r\n  const handleModalOK = () => {\r\n    setModalVisible(false);\r\n    const editMessageTextArea = document.getElementById(`editMessageTextArea`);\r\n\r\n    if (!messageCensor(editMessageTextArea.value)) {\r\n      webSocket.send(\r\n        JSON.stringify({\r\n          command: \"ban\",\r\n          body: {\r\n            username: currentUser.trim(),\r\n            room: currentRoom.trim(),\r\n            source: BAN_BROADCAST\r\n          }\r\n        })\r\n      );\r\n      return;\r\n    }\r\n\r\n    const payload = {\r\n      messageId: messageToEdit.id,\r\n      chatRoom: currentRoom,\r\n      editedText: editMessageTextArea.value\r\n    };\r\n    dispatch({\r\n      type: EDIT_MESSAGE,\r\n      payload\r\n    });\r\n    webSocket.send(\r\n      JSON.stringify({\r\n        command: \"editMessage\",\r\n        body: payload\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleClickEdit = message => {\r\n    setMessageToEdit(message);\r\n    setModalVisible(true);\r\n  };\r\n\r\n  return (\r\n    <article id={\"chat-messages\"}>\r\n      {inputMessages &&\r\n        inputMessages.map(message => {\r\n          return (\r\n            <Row className=\"message\">\r\n              <ChatMessage message={message} onClickEdit={handleClickEdit} />\r\n            </Row>\r\n          );\r\n        })}\r\n      <Modal\r\n        title=\"Edit Message\"\r\n        visible={modalVisible}\r\n        onOk={handleModalOK}\r\n        onCancel={() => setModalVisible(false)}\r\n      >\r\n        <TextArea\r\n          id={\"editMessageTextArea\"}\r\n          rows={4}\r\n          showCount={true}\r\n          defaultValue={messageToEdit?.text}\r\n          onPressEnter={handleModalOK}\r\n        />\r\n      </Modal>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default ChatMessages;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport { Popover, Space, Row, Col, Input, Button } from \"antd\";\r\nimport \"./Compose.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ON_MESSAGE } from \"../../../actions/type\";\r\nimport * as uuid from \"uuid\";\r\nimport webSocket from \"../../websocket/Websocket\";\r\nimport { messageCensor } from \"../../../helpers/util\";\r\nimport { BAN_BROADCAST } from \"../../room/report/constant\";\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\nimport { Picker } from \"emoji-mart\";\r\nimport { SmileOutlined  } from '@ant-design/icons';\r\nimport notification from \"../../notification\";\r\n\r\n\r\nconst { TextArea } = Input;\r\n\r\n\r\nconst Compose = () => {\r\n  const dispatch = useDispatch();\r\n  const currentUser = useSelector(state => state.login.user);\r\n  const currentRoom = useSelector(state => state.room.currentRoom);\r\n  const [textAreaText, setTextAreaText] = useState(\"\");\r\n  const err_msg = useSelector(state => state.message.err_msg);\r\n\r\n\r\n  const handleMessageSend = event => {\r\n    event.preventDefault();\r\n    if (!textAreaText) {\r\n      return;\r\n    }\r\n\r\n    if (!messageCensor(textAreaText)) {\r\n      webSocket.send(\r\n        JSON.stringify({\r\n          command: \"ban\",\r\n          body: {\r\n            username: currentUser.trim(),\r\n            room: currentRoom.trim(),\r\n            source: BAN_BROADCAST\r\n          }\r\n        })\r\n      );\r\n    }\r\n    else if (err_msg.length > 0) {\r\n      notification.error(err_msg);\r\n    }\r\n    else {\r\n      sendMessage();\r\n    }\r\n\r\n    setTextAreaText('');\r\n  };\r\n  const handleMessageChange = event => {\r\n    setTextAreaText(event.target.value);\r\n  };\r\n\r\n  const sendMessage = () => {\r\n    const payload = {\r\n      chatRoom: currentRoom,\r\n      text: textAreaText,\r\n      id: uuid.v4(),\r\n      time: new Date().getTime(),\r\n      sender: currentUser\r\n    };\r\n    dispatch({\r\n      type: ON_MESSAGE,\r\n      payload: {\r\n        ...payload,\r\n        received: true\r\n      }\r\n    });\r\n    webSocket.send(\r\n      JSON.stringify({\r\n        command: \"broadcast\",\r\n        body: payload\r\n      })\r\n    );\r\n  };\r\n\r\n  const [showEmojiPicker, setshowEmojiPicker] = useState(false);\r\n\r\n  const toggleEmojiPicker = () => {\r\n    setshowEmojiPicker(!showEmojiPicker)\r\n  }\r\n\r\n  const emojiHandler = (emoji) => {\r\n    setTextAreaText(textAreaText + emoji.native);\r\n  }\r\n\r\n  const content = (\r\n        <Picker set = 'twitter' perLine = {12} include = {['smileys','people']} onSelect={emojiHandler}/>\r\n  );\r\n\r\n  return (\r\n    <div id={\"compose\"}>\r\n      <Row>\r\n        <TextArea\r\n          allowClear={true}\r\n          id={\"compose-textarea\"}\r\n          rows={4}\r\n          // defaultValue={\"\"}\r\n          value={textAreaText}\r\n          showCount={true}\r\n          onPressEnter={handleMessageSend}\r\n          onChange={handleMessageChange}\r\n        />\r\n      </Row>\r\n      <Space style = {{float:\"right\"}}>\r\n        <Popover content={content}  trigger=\"click\"\r\n                 visible={showEmojiPicker}\r\n                 onVisibleChange={toggleEmojiPicker}\r\n        >\r\n          <Button ><SmileOutlined /></Button>\r\n        </Popover>\r\n          <Button onClick={handleMessageSend}>Send</Button>\r\n      </Space>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Compose;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Row, Layout } from \"antd\";\r\nimport ChatMessages from \"./ChatMessages\";\r\nimport Compose from \"./Compose\";\r\nimport \"./ChatArea.css\";\r\n\r\nconst { Content, Footer, Header } = Layout;\r\n\r\nconst ChatArea = ({ chatRoom }) => {\r\n  const messages = useSelector(state => {\r\n    return state.message.messages;\r\n  });\r\n  const [userScrolled, setUserScrolled] = useState(false);\r\n  useEffect(() => {\r\n    const chatAreaContent = document.querySelector(\"#chat-area-content\");\r\n    if (\r\n      chatAreaContent.scrollTop >\r\n      chatAreaContent.scrollHeight - 1.5 * chatAreaContent.clientHeight\r\n    ) {\r\n      chatAreaContent.scrollTop =\r\n        chatAreaContent.scrollHeight - chatAreaContent.clientHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div id={\"chat-area\"}>\r\n      <Layout>\r\n        <Content id={\"chat-area-content\"}>\r\n          <ChatMessages inputMessages={messages[chatRoom]} />\r\n        </Content>\r\n        <Footer>\r\n          <Compose />\r\n        </Footer>\r\n      </Layout>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatArea;\r\n","import {Form, Input, Switch, Select, Button, Popover, Menu, Modal} from 'antd';\r\nimport React, {useState} from 'react';\r\nimport {PlusCircleOutlined} from \"@ant-design/icons\";\r\nimport webSocket from \"../websocket/Websocket\";\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 8,\r\n    },\r\n    wrapperCol: {\r\n        span: 16,\r\n    },\r\n};\r\nconst validateMessages = {\r\n    required: '${label} is required!',\r\n};\r\n\r\nconst CreateRoom = (props) => {\r\n    const interests = [];\r\n    const interest_string_list = [\"Traveling\", \"Reading\", \"Music\", \"Sports\", \"Movies\", \"Games\"];\r\n    const {Option} = Select;\r\n    const {visible, setVisible} = props;\r\n    const [interestDisabled, setInterestDisabled] = useState(true);\r\n    for (let i = 0; i < 6; i++) {\r\n        interests.push(<Option value={interest_string_list[i]}>{interest_string_list[i]}</Option>);\r\n    }\r\n    const onFinish = (values) => {\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"createRoom\",\r\n                    body: {\r\n                        name: values.name,\r\n                        interests: values.interest,\r\n                        isPrivate: values.switch || false\r\n                    }\r\n                }\r\n            )\r\n        )\r\n        setVisible(false);\r\n    };\r\n\r\n    const handleVisibleChange = visible => {\r\n        setVisible(visible);\r\n    };\r\n    return (\r\n        <Popover placement=\"rightTop\" title={\"Create Room\"}\r\n                 content={<Form {...layout} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}\r\n                                style={{outerWidth: \"500\"}}>\r\n                     <Form.Item name={\"name\"}\r\n                                label=\"Name\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Name is required!',\r\n                                    },\r\n                                    {\r\n                                        pattern: /^[a-zA-Z0-9_]{1,20}$/,\r\n                                        message: 'Name should be 1-20 alphanumeric characters or underscores',\r\n                                    },\r\n                                ]}><Input/>\r\n                     </Form.Item>\r\n                     <Form.Item name=\"switch\" label=\"Private\" valuePropName=\"checked\"><Switch onClick={() => {\r\n                         setInterestDisabled(prevState => !prevState)\r\n                     }}/>\r\n                     </Form.Item>\r\n                     <Form.Item name={\"interest\"}\r\n                                label=\"Interests\"\r\n                                rules={[{required: !interestDisabled}]}>\r\n                         <Select mode=\"multiple\"\r\n                                 allowClear\r\n                                 style={{width: '100%'}}\r\n                                 placeholder=\"Please select\"\r\n                                 disabled={interestDisabled}>{interests}</Select>\r\n                     </Form.Item>\r\n\r\n                     <Form.Item wrapperCol={{...layout.wrapperCol, offset: 8}}>\r\n                         <Button type=\"primary\" htmlType=\"submit\">\r\n                             Submit\r\n                         </Button>\r\n                     </Form.Item>\r\n                 </Form>}\r\n                 trigger=\"click\"\r\n                 visible={visible}\r\n                 onVisibleChange={handleVisibleChange}>\r\n            <span><PlusCircleOutlined/></span>Create\r\n        </Popover>\r\n    );\r\n\r\n};\r\nexport default CreateRoom;\r\n\r\n\r\n","import {Tooltip, Menu, Tag, Button, Dropdown, Col, Popover} from \"antd\";\r\nimport {GroupOutlined} from \"@ant-design/icons\";\r\nimport React, {useState} from \"react\";\r\nimport webSocket from \"../websocket/Websocket\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {JOIN_ROOM} from \"../../actions/type\";\r\n\r\n\r\nconst {SubMenu} = Menu;\r\nconst JoinedRoom = (props) => {\r\n    let keyId = 1;\r\n    const dispatch = useDispatch();\r\n    const {joinedRooms, userList, userName, setReport} = props;\r\n    const report = (reportRoom, reportName) => {\r\n        setReport({visible: true, reportRoom: reportRoom, reportName: reportName})\r\n    }\r\n    const forceToLeave = (name, room) => {\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"forceToLeave\",\r\n                    body: {\r\n                        userName: name,\r\n                        roomName: room\r\n                    }\r\n                }\r\n            )\r\n        )\r\n    };\r\n\r\n    const block = (name) => {\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"block\",\r\n                    body: {\r\n                        userName: name\r\n                    }\r\n                }\r\n            )\r\n        )\r\n\r\n    }\r\n\r\n    const getRemoveButton = (name, roomName, admin) => {\r\n        if (name === userName || name === admin) return null;\r\n        if (userName === admin) return (<Tooltip title=\"Remove\"><Button style={{marginLeft: '5px'}} ghost = \"true\" size = \"small\" key={name + \"remove\" + keyId++} type=\"primary\" shape=\"circle\"\r\n                                                                        onClick={() => forceToLeave(name, roomName)}>R</Button></Tooltip>)\r\n        return (<Tooltip title=\"Report\"><Button  style={{marginLeft: '5px'}} ghost = \"true\" size = \"small\" type=\"primary\"  shape=\"circle\" key={name + \"report\" + keyId++} onClick={() => {\r\n            report(roomName, name)\r\n        }}>!</Button></Tooltip>)\r\n    }\r\n\r\n    const getBlockButton = (name) => {\r\n        if (name !== userName) return<Tooltip title=\"Block\"> <Button ghost = \"true\" size = \"small\" type=\"primary\" shape=\"circle\"  key={name + \"block\" + keyId++}\r\n                                              onClick={() => block(name)}>B</Button></Tooltip>\r\n        return null\r\n    }\r\n\r\n    const handleSelectedRoom = ({key}) => {\r\n        dispatch({\r\n            type: JOIN_ROOM,\r\n            payload: key\r\n        })\r\n    }\r\n    return (\r\n        <Menu mode=\"inline\" selectedKeys={['']} defaultOpenKeys={['joinedRooms']}>\r\n            <SubMenu key = \"joinedRooms\" title={<span><GroupOutlined/><span>Joined Rooms</span></span>}>\r\n                {\r\n                    joinedRooms.map((name, index) => {\r\n                        return (\r\n\r\n                            <SubMenu key={name} title={name} onTitleClick={handleSelectedRoom}>\r\n                                {userList[index].map(name => {\r\n                                    let color = (userList[index][0] === name) ? \"magenta\" : \"green\";\r\n                                    let tag = (userList[index][0] === name) ? \"Admin\" : \"Member\";\r\n                                    return (\r\n                                        <Menu.Item key={name + keyId++}><Tag color={color}>{tag}</Tag>{name}\r\n                                            {getRemoveButton(name, joinedRooms[index], userList[index][0])}\r\n                                            {getBlockButton(name)}\r\n                                        </Menu.Item>\r\n                                    )\r\n\r\n                                })\r\n                                }\r\n\r\n                            </SubMenu>\r\n                        )\r\n                    })\r\n                }\r\n            </SubMenu>\r\n        </Menu>\r\n    );\r\n\r\n\r\n}\r\nexport default JoinedRoom;","import {Menu, Tag, Popover, Button, Modal} from \"antd\";\r\nimport {CloseCircleOutlined, GroupOutlined, MinusCircleOutlined, PlusCircleOutlined} from \"@ant-design/icons\";\r\nimport React, {useState} from \"react\";\r\nimport {Route} from \"react-router-dom\";\r\nimport CreateRoom from \"./createRoom\";\r\nimport webSocket from \"../websocket/Websocket\";\r\nimport JoinedRoom from \"./joinedRoom\";\r\n\r\nconst {SubMenu} = Menu;\r\n\r\nconst ExitRoom = (props) => {\r\n    const {joinedRooms} = props;\r\n    const onFinish = (values) => {\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"exitRoom\",\r\n                    body: {\r\n                        name: values.key\r\n                    }\r\n                }\r\n            )\r\n        )\r\n    };\r\n    return (\r\n        <Menu mode=\"inline\" onClick={(e) => {\r\n            onFinish(e)\r\n        }}>\r\n            <SubMenu title={<span><span><MinusCircleOutlined/></span>Exit</span>}>\r\n                {\r\n                    joinedRooms.map(name => {\r\n                        return (\r\n                            <Menu.Item key={name}>{name}</Menu.Item>\r\n                        )\r\n                    })\r\n                }\r\n            </SubMenu>\r\n        </Menu>\r\n    );\r\n}\r\nexport default ExitRoom;","import {Menu, Tag, Popover, Button, Modal} from \"antd\";\r\nimport {CloseCircleOutlined, GroupOutlined, MinusCircleOutlined, PlusCircleOutlined} from \"@ant-design/icons\";\r\nimport React, {useState} from \"react\";\r\nimport {Route} from \"react-router-dom\";\r\nimport CreateRoom from \"./createRoom\";\r\nimport webSocket from \"../websocket/Websocket\";\r\nimport JoinedRoom from \"./joinedRoom\";\r\n\r\n\r\nconst ExitAllRooms = () => {\r\n    const onFinish = () => {\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"exitAllRoom\",\r\n                    body: {\r\n                    }\r\n                }\r\n            )\r\n        )\r\n    };\r\n\r\n    return (\r\n        <Menu mode=\"inline\" selectedKeys={['']} onClick={onFinish}>\r\n            <Menu.Item><span><CloseCircleOutlined/></span>Exit All</Menu.Item>\r\n        </Menu>\r\n    );\r\n}\r\nexport default ExitAllRooms;","import {Menu} from \"antd\";\r\nimport {LockOutlined} from \"@ant-design/icons\";\r\nimport {GroupOutlined} from \"@ant-design/icons\";\r\nimport React from \"react\";\r\nimport webSocket from \"../websocket/Websocket\";\r\n\r\nconst {SubMenu} = Menu;\r\nconst AllRooms = (props) => {\r\n    const {allRooms, isPublic} = props;\r\n    const onFinish = (values) => {\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"joinRoom\",\r\n                    body: {\r\n                        name: values.key\r\n                    }\r\n                }\r\n            )\r\n        )\r\n    };\r\n\r\n    return (\r\n        <Menu mode=\"inline\"  onClick={(e) => {\r\n            onFinish(e)\r\n        }} defaultOpenKeys={['allRooms']} >\r\n            <SubMenu key=\"allRooms\" title={<span><GroupOutlined/><span>All Rooms</span></span>}>\r\n                {\r\n                    allRooms.map((name, index) => {\r\n                        return (\r\n\r\n                            <Menu.Item key={name}><span>{isPublic[index] === \"false\" ?\r\n                                <span><LockOutlined/></span> : null}{name}</span></Menu.Item>\r\n                        );\r\n                    })\r\n\r\n                }\r\n            </SubMenu>\r\n        </Menu>\r\n    );\r\n\r\n\r\n}\r\nexport default AllRooms;","import { Modal, Button } from 'antd';\r\nimport React, { useState } from \"react\";\r\nimport webSocket from \"../../websocket/Websocket\";\r\nimport { Radio, Input } from 'antd';\r\nimport './reportForm.css'\r\nimport {reportReasons} from './constant'\r\n\r\nconst ReportForm = (props) => {\r\n    const [value, setValue] = useState(undefined);\r\n    const [checkedReason, setCheckedReason] = useState(\"\");\r\n    const [okButtonDisabled, setOkButtonDisabled]  = useState(true);\r\n    const {report, setReport} = props;\r\n\r\n    const handleOk = () => {\r\n       setReport({...report, visible: false})\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"report\",\r\n                    body: {\r\n                        reportedUsername: report.reportName,\r\n                        reportedReason: checkedReason,\r\n                        reportedRoom: report.reportRoom,\r\n                    }\r\n                }\r\n            )\r\n        )\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setReport({...report, visible: false})\r\n    };\r\n\r\n    const onChange = e => {\r\n        setOkButtonDisabled(false);\r\n        setValue(e.target.value);\r\n\r\n        if (e.target.value !== 3) {\r\n            setCheckedReason(reportReasons[e.target.value]);\r\n        }\r\n    };\r\n\r\n    const onChangeInput = e => {\r\n        if (value === 3) {\r\n            setCheckedReason(e.target.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                title=\"Report\"\r\n                visible={report.visible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n                okButtonProps={{disabled: okButtonDisabled}}\r\n            >\r\n                <p>Please Choose Your Reasons</p>\r\n                <Radio.Group class=\"radio-group\" onChange={onChange} value={value}>\r\n                    <Radio  class=\"radio-option\" value={0}>\r\n                        {reportReasons[0]}\r\n                    </Radio>\r\n                    <Radio  class=\"radio-option\" value={1}>\r\n                        {reportReasons[1]}\r\n                    </Radio>\r\n                    <Radio  class=\"radio-option\" value={2}>\r\n                        {reportReasons[2]}\r\n                    </Radio>\r\n                    <Radio  class=\"radio-option\" value={3}>\r\n                        More...\r\n                        {value === 3 ? <Input style={{ width: 100, marginLeft: 10 }} onChange={onChangeInput} /> : null}\r\n                    </Radio>\r\n                </Radio.Group>\r\n            </Modal>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ReportForm","import { Modal, Button } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport webSocket from \"../../websocket/Websocket\";\r\nimport {BAN_REPORT} from \"./constant\";\r\n\r\nconst ReportAdminForm = (props) => {\r\n    const {isReportAdminVisible, reportedReason, reportedUsername, reportedRoom} = props.reportStore;\r\n    const [visible, setVisible] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setVisible(isReportAdminVisible);\r\n    }, [props.reportStore])\r\n\r\n    const handleOk = e => {\r\n        setVisible(false);\r\n        webSocket.send(\r\n            JSON.stringify({\r\n                    command: \"ban\",\r\n                    body: {\r\n                        username: reportedUsername.trim(),\r\n                        room: reportedRoom.trim(),\r\n                        source: BAN_REPORT\r\n                    }\r\n                }\r\n            )\r\n        )\r\n    };\r\n\r\n    const handleCancel = e => {\r\n        setVisible(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                title=\"Handle Report Message\"\r\n                visible={visible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n                okText={\"Approve\"}\r\n                cancelText={\"Disapprove\"}\r\n            >\r\n                <p>Reported User: {reportedUsername}</p>\r\n                <p>{reportedReason}</p>\r\n            </Modal>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return { reportStore: state.report }\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(ReportAdminForm);","import {Menu, Button, Modal, message} from \"antd\";\r\nimport React, {useState, useMemo, useEffect} from \"react\";\r\nimport CreateRoom from \"./createRoom\";\r\nimport JoinedRoom from \"./joinedRoom\";\r\nimport ExitRoom from \"./exitRoom\";\r\nimport ExitAllRooms from \"./exitAllRooms\";\r\nimport AllRooms from \"./allRooms\";\r\nimport webSocket from \"../websocket/Websocket\";\r\nimport {connect} from \"react-redux\";\r\nimport ReportForm from \"./report/reportForm\";\r\nimport ReportAdminForm from \"./report/reportAdminForm\";\r\nimport notification from \"../notification\";\r\n\r\nconst Index = (props) => {\r\n    const {room} = props;\r\n    const [joinedRooms, setJoinedRooms] = useState([]);\r\n    const [userList, setUserList] = useState(() => [[]]);\r\n    const [allRooms, setAllRooms] = useState(() => []);\r\n    const [visible, setVisible] = useState(false);\r\n    const [userName, setUserName] = useState();\r\n    const [isPublic, setIsPublic] = useState(() => []);\r\n    const [report, setReport] = useState({visible: false, reportRoom: null, reportName: null})\r\n    const handleClick = (e) => {\r\n        if (e.key === \"create\") setVisible(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (room.msg == null) {\r\n            if (room.joinedRoom) setJoinedRooms(room.joinedRoom);\r\n            if (room.userList) setUserList(room.userList);\r\n            if (room.allRooms) setAllRooms(room.allRooms);\r\n            if (room.userName) setUserName(room.userName);\r\n            if (room.isPublic) setIsPublic(room.isPublic);\r\n\r\n        } else {\r\n            if (room.type === \"err\") notification.error(room.msg);\r\n            else if (room.type === \"info\") notification.info(room.msg);\r\n            else notification.success(room.msg);\r\n\r\n        }\r\n    }, [room])\r\n\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            webSocket.send(JSON.stringify({\r\n                    command: \"preventTimeOut\",\r\n                    body: {\r\n                        name: \"preventTimeOut\"\r\n                    }\r\n                }\r\n            ))\r\n        }, 10000);\r\n    }, []);\r\n\r\n    return (\r\n        <Menu mode=\"inline\" onClick={handleClick} selectedKeys={['']} defaultOpenKeys={['allRooms', 'joinedRooms']}>\r\n            <Menu.Item key=\"create\">\r\n                <CreateRoom visible={visible} setVisible={setVisible}/>\r\n            </Menu.Item>\r\n            {/*<ExitRoom joinedRooms={joinedRooms}/>*/}\r\n            <ExitAllRooms/>\r\n            <JoinedRoom joinedRooms={joinedRooms} userList={userList} userName={userName} setReport={setReport}/>\r\n            <AllRooms allRooms={allRooms} isPublic={isPublic}/>\r\n            <ReportForm report={report} setReport={setReport}/>\r\n            <ReportAdminForm/>\r\n        </Menu>\r\n\r\n\r\n    )\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {room: state.room}\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(Index);","import {React, useState} from \"react\";\r\nimport { Modal, Input} from \"antd\";\r\nimport webSocket from \"../../websocket/Websocket\";\r\nimport {messageCensor} from \"../../../helpers/util\";\r\nimport {BAN_PRIVATEMSG} from \"../../room/report/constant\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nconst Message = (props) => {\r\n\r\n    const [value, setValue] = useState(\"\");\r\n    const {userName, visible, setVisible} = props;\r\n    const { TextArea } = Input;\r\n    const currentUser = useSelector(state => state.login.user);\r\n    const handleOk = () => {\r\n        if (!messageCensor(value)) {\r\n            webSocket.send(\r\n                JSON.stringify({\r\n                    command: \"ban\",\r\n                    body: {\r\n                        username: currentUser.trim(),\r\n                        room: null,\r\n                        source: BAN_PRIVATEMSG\r\n                    }\r\n                })\r\n            )\r\n        }\r\n        else {\r\n            webSocket.send(\r\n                JSON.stringify({\r\n                    command: \"privateMessage\",\r\n                    body: {\r\n                        name: userName,\r\n                        info: value\r\n                    }\r\n                })\r\n            )\r\n        }\r\n        setValue(\"\");\r\n        setVisible(false);\r\n    }\r\n\r\n    const onChange = ({ target: { value } }) => {\r\n        setValue(value);\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            title={`To ${userName}`}\r\n            visible={visible}\r\n            onOk={handleOk}\r\n            onCancel={() => {setValue(\"\"); setVisible(false)}}\r\n        >\r\n            <TextArea value={value}\r\n                   onChange={onChange}/>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default Message;","import {React, useState} from \"react\";\r\nimport { List, Avatar, Button } from \"antd\";\r\nimport webSocket from \"../../websocket/Websocket\";\r\nimport colorHelper from \"../../../helpers/color-user-helper\";\r\nimport Message from \"./message\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport ChatMessage from \"../chat-area/ChatMessage\";\r\n\r\n\r\nconst UserList = (props) => {\r\n\r\n    const [visible, setVisible] = useState(false);\r\n    const [userName, setUserName] = useState(\"\");\r\n\r\n\r\n    const allUsers = useSelector( state => state.userList.allUserList);\r\n    const currentUser = useSelector (state => state.login.user);\r\n    const getDisplayName = sender => {\r\n        return sender.split(\"_\").map(name => name[0]);\r\n    };\r\n\r\n    return (\r\n    <div>\r\n        <Message userName={userName} visible={visible} setVisible={setVisible}/>\r\n            <List\r\n                style = {{width:\"100%\", height:\"100%\",position:\"absolute\", overflow:\"auto\"}}\r\n                itemLayout=\"horizontal\"\r\n                dataSource={allUsers}\r\n                renderItem={item => (\r\n                    <List.Item style={{ padding: \"15px\" }}>\r\n                        <List.Item.Meta\r\n                            avatar={\r\n                                <Avatar\r\n                                    style={{\r\n                                        backgroundColor: colorHelper(\r\n                                            item.name\r\n                                        ),\r\n                                        verticalAlign: \"middle\"\r\n                                    }}\r\n                                    size=\"large\"\r\n                                    gap={1}\r\n                                >\r\n                                    {getDisplayName(item.name)}\r\n                                </Avatar>\r\n                            }\r\n                            description={item.name}\r\n                            title={item.school}\r\n                        />\r\n                        {item.name != currentUser?\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                size=\"small\"\r\n                                onClick={() => {setUserName(item.name); setVisible(true)}}\r\n                            >\r\n                                Chat!\r\n                            </Button>\r\n                            :   <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                size=\"small\"\r\n                                disabled = {true}\r\n                            >\r\n                                Chat!\r\n                            </Button>}\r\n\r\n\r\n                    </List.Item>\r\n                )}\r\n            />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","import { Popover, Button, Input, Space } from 'antd';\r\nimport React, {useState, useEffect} from 'react';\r\nimport { connect , useSelector} from 'react-redux';\r\nimport webSocket from \"../../websocket/Websocket\"\r\nimport notification from \"../../notification\";\r\nimport {JOIN_ROOM} from \"../../../actions/type\";\r\n\r\n\r\nconst InviteForm = (props) => {\r\n    const {selectedChatRoom, rooms} = props;\r\n    const [name, setName] = useState(\"\");\r\n    const [joinedRooms, setJoinedRooms] = useState([]);\r\n    const currentUser = useSelector(state => state.login.user);\r\n    const [visible, setVisible] = useState(false);\r\n\r\n    const hide = () => {\r\n        setVisible(false)\r\n    }\r\n\r\n\r\n\r\n    const handleVisibleChange = e => {\r\n        setVisible(e)\r\n    }\r\n\r\n    const onChange = e => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (rooms.msg == null) {\r\n            if (rooms.joinedRoom) setJoinedRooms(rooms.joinedRoom);\r\n        } else {\r\n\r\n        }\r\n    }, [rooms])\r\n\r\n    const onFinish = (room, user) => {\r\n        setVisible(false)\r\n        if (room != null && user != null) {\r\n            webSocket.send(\r\n                JSON.stringify({\r\n                    command: \"invite\",\r\n                    body: {\r\n                        currentUser: currentUser,\r\n                        inviteUserName: user,\r\n                        invitedRoom: room\r\n                    }\r\n                })\r\n            )\r\n        }\r\n    };\r\n\r\n\r\n    const content = (\r\n        <Space align=\"center\">\r\n            <Input placeholder=\"Username\" onChange={onChange}/>\r\n            <Button type=\"primary\" onClick={() => onFinish(selectedChatRoom, name)}>Invite</Button>\r\n        </Space>\r\n    );\r\n\r\n    return (\r\n\r\n        <Popover content={content} title=\"Invite your friend!\" trigger=\"click\"\r\n            visible={visible}\r\n            onVisibleChange={handleVisibleChange}\r\n        >\r\n            <Button>Invite</Button>\r\n        </Popover>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {rooms: state.room}\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(InviteForm);","import React, {useEffect, useState} from \"react\";\r\nimport {Layout, Row, Col} from \"antd\";\r\nimport {Space, Button, Popover, notification, Avatar, Drawer, List} from \"antd\";\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport ChatArea from \"./chat-area/ChatArea\";\r\nimport Room from \"../room\";\r\nimport UserList from \"./userList\";\r\nimport ReportForm from \"../room/report/reportForm\";\r\nimport ReportAdminForm from \"../room/report/reportAdminForm\";\r\nimport webSocket from \"../websocket/Websocket\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport notifications from \"../notification\";\r\nimport InviteForm from \"./inviteForm\";\r\nimport Message from \"./userList/message\";\r\nimport './index.css';\r\nimport {EXIT_ROOM, JOIN_ROOM} from \"../../actions/type\";\r\n\r\nconst {Header, Content, Footer, Sider} = Layout;\r\nconst Chat = props => {\r\n    const history = useHistory();\r\n    const {dispatch, logIn, priMsg} = props;\r\n    const selectedChatRoom = useSelector(state => state.room.currentRoom);\r\n    const [visible, setVisible] = useState(false);\r\n    const [drawer_visible, setDrawerVisible] = useState(false);\r\n    const exitDispatch = useDispatch();\r\n\r\n    const [userName, setUserName] = useState(\"\");\r\n    const userList = useSelector(state => {\r\n        if (!state.room.userList || !state.room.joinedRoom) {\r\n            return null;\r\n        }\r\n        return state.room.userList[state.room.joinedRoom.indexOf(selectedChatRoom)];\r\n    });\r\n\r\n    const currentUser = useSelector(state => state.login.user);\r\n    const allUsers = useSelector(state => state.userList.allUserList);\r\n    const profile = allUsers.find(user => user.name === currentUser);\r\n    var data;\r\n    if (profile != undefined) {\r\n        var myInterests = '';\r\n        for (var i = 0; i < profile.interest.length; i++) {\r\n            if (i > 0) {\r\n                myInterests += ', ';\r\n            }\r\n            myInterests += profile.interest[i];\r\n        }\r\n        data = [\r\n            {\r\n                title: 'Name',\r\n                description: profile.name,\r\n            },\r\n            {\r\n                title: 'Age',\r\n                description: profile.age,\r\n            },\r\n            {\r\n                title: 'School',\r\n                description: profile.school,\r\n            },\r\n            {\r\n                title: 'Interests',\r\n                description: myInterests,\r\n            },\r\n        ];\r\n    }\r\n\r\n\r\n    const mes = (description, userName) => {\r\n        return (\r\n            <div>\r\n                <div className=\"message\">\r\n                    {description}\r\n                </div>\r\n                <div className=\"message\">\r\n                    <Button onClick={() => handleReply(userName)}>Reply</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const handleReply = (userName) => {\r\n        setUserName(userName);\r\n        setVisible(true);\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setDrawerVisible(true);\r\n    };\r\n\r\n    const onClose = () => {\r\n        setDrawerVisible(false);\r\n    };\r\n\r\n    const exitRoom = () => {\r\n\r\n        return (<Button className=\"exitButton\" onClick={() => {\r\n            exitDispatch({\r\n                type: EXIT_ROOM,\r\n                payload: null\r\n            })\r\n            webSocket.send(\r\n                JSON.stringify({\r\n                        command: \"exitRoom\",\r\n                        body: {\r\n                            name: selectedChatRoom\r\n                        }\r\n                    }\r\n                )\r\n            )\r\n\r\n        }}>Exit</Button>)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (priMsg.message !== null) {\r\n            notification.info({\r\n                message: `${priMsg.sender} sends you a message`,\r\n                description: mes(priMsg.message.info, priMsg.sender),\r\n                duration: 5,\r\n                styles: {paddingTop: '10px'}\r\n            });\r\n        } else if (priMsg.feedback !== null) {\r\n            if (priMsg.feedback.indexOf(\"Sorry\") < 0) {\r\n                notifications.success(priMsg.feedback);\r\n            } else {\r\n                notifications.error(priMsg.feedback);\r\n            }\r\n        }\r\n    }, [priMsg]);\r\n\r\n    return (\r\n        <Layout style={{height: \"100vh\"}}>\r\n            <Message userName={userName} visible={visible} setVisible={setVisible}/>\r\n            <Sider width=\"300px\" theme=\"light\" style={{overflowY: 'auto'}}>\r\n                <Room/>\r\n            </Sider>\r\n            <Layout style={{overFlow: \"hidden\"}}>\r\n                <Header\r\n                    style={{\r\n                        padding: 0,\r\n                        backgroundColor: \"white\",\r\n                        //borderLeft: \"2px solid rgba(0, 0, 0, 0.06)\"\r\n                    }}\r\n                >\r\n                    {selectedChatRoom && (\r\n                        <span\r\n                            id={\"chat-area-header-room-name\"}\r\n                            style={{fontSize: \"larger\", fontWeight: \"bolder\"}}\r\n                        >\r\n              {selectedChatRoom || \"\"}\r\n            </span>\r\n                    )}\r\n                    {selectedChatRoom && (\r\n                        <span\r\n                            id={\"chat-area-header-user-count\"}\r\n                            style={{fontSize: \"medium\", marginLeft: \"20px\"}}\r\n                        >\r\n              {(userList && `(${userList.length})`) || \"\"}\r\n            </span>\r\n                    )}\r\n                    <Space style={{float: 'right'}}\r\n                           size=\"middle\">\r\n                        <div>\r\n\r\n                            {selectedChatRoom != null ? <> {exitRoom()}<InviteForm\r\n                                selectedChatRoom={selectedChatRoom}/> </> : null}\r\n                        </div>\r\n\r\n\r\n                        <Button type=\"primary\" shape=\"circle\" icon={<UserOutlined/>} onClick={showDrawer}/>\r\n                        <Drawer\r\n                            title=\"User Profile\"\r\n                            placement=\"left\"\r\n                            closable={false}\r\n                            onClose={onClose}\r\n                            visible={drawer_visible}\r\n                        >\r\n                            <List\r\n                                itemLayout=\"horizontal\"\r\n                                dataSource={data}\r\n                                renderItem={item => (\r\n                                    <List.Item>\r\n                                        <List.Item.Meta\r\n                                            title={item.title}\r\n                                            description={item.description}\r\n                                        />\r\n                                    </List.Item>\r\n                                )}\r\n                            />\r\n\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                size=\"small\"\r\n                                onClick={() => {\r\n                                    webSocket.send(\r\n                                        JSON.stringify({\r\n                                            command: \"logout\",\r\n                                            body: {}\r\n                                        })\r\n                                    );\r\n                                }}\r\n                            >\r\n                                Logout\r\n                            </Button>\r\n\r\n                        </Drawer>\r\n\r\n                    </Space>\r\n                </Header>\r\n                <Content style={{margin: \"24px 16px 0\"}}>\r\n                    <Row style={{height: \"100%\"}}>\r\n                        <Col span={17}>\r\n                            <div\r\n                                className=\"site-layout-background\"\r\n                                style={{minHeight: 360, height: \"100%\"}}\r\n                            >\r\n                                {selectedChatRoom && <ChatArea chatRoom={selectedChatRoom}/>}\r\n                            </div>\r\n                        </Col>\r\n                        <Col\r\n                            span={7}\r\n                            style={{borderLeft: \"2px solid rgba(0, 0, 0, 0.06)\"}}\r\n                        >\r\n                            {UserList()}\r\n                            {/*{ReportForm()}*/}\r\n                        </Col>\r\n                    </Row>\r\n                </Content>\r\n                {/*TEMP FOR Report*/}\r\n                {/*<ReportAdminForm report={report}/>*/}\r\n                <Footer style={{textAlign: \"center\"}}>\r\n                    Chat App ©2020 Created by Sammy the Owl\r\n                </Footer>\r\n            </Layout>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {logIn: state.login, priMsg: state.priMessage};\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(Chat);\r\n","import {message} from 'antd';\r\nimport {\r\n    SIGN_IN,\r\n    SIGN_OUT,\r\n    ON_MESSAGE,\r\n    CREATE_ROOM,\r\n    RESET,\r\n    ROOM,\r\n    ON_REPORT,\r\n    PRI_MESSAGE,\r\n    SETALLUSERS,\r\n    ON_MESSAGE_ERR\r\n} from './type';\r\n\r\nvar mesId = 0;\r\n\r\nexport const onMessage = (messages) =>\r\n    dispatch => {\r\n        const data = JSON.parse(messages.data);\r\n        switch (data.section) {\r\n            case \"login\":\r\n                if (data.type === \"err\") {\r\n                    dispatch({type: SIGN_IN, payload: {mesId: mesId++, isSignedIn: false, user: null, msg: data.msg}});\r\n                } else {\r\n                    dispatch({\r\n                        type: SIGN_IN,\r\n                        payload: {mesId: mesId++, isSignedIn: true, user: data.msg, msg: data.msg}\r\n                    });\r\n                }\r\n                break;\r\n            case \"logout\":\r\n                dispatch({type: SIGN_OUT, payload: {mesId: mesId++, isSignedIn: false, user: null, msg: data.msg}});\r\n                break;\r\n            case \"room\":\r\n                dispatch({\r\n                    type: ROOM,\r\n                    payload: {\r\n                        request: data.request,\r\n                        type: data.type,\r\n                        msg: data.msg,\r\n                        param1: data.param1,\r\n                        param2: data.param2,\r\n                        param3: data.param3,\r\n                        param4: data.param4,\r\n                        param5: data.param5\r\n                    }\r\n                });\r\n                break;\r\n            case \"report\":\r\n                const body = JSON.parse(data.msg);\r\n                dispatch({\r\n                    type: ON_REPORT,\r\n                    payload: {\r\n                        reportedUsername: body.reportedUsername,\r\n                        reportedReason: body.reportedReason,\r\n                        reportedRoom: body.reportedRoom\r\n                    }\r\n                });\r\n                break;\r\n            case \"message\":\r\n                if (data.request === \"ON_MESSAGE_ERR\") {\r\n                    dispatch({\r\n                        type: ON_MESSAGE_ERR,\r\n                        payload: {\r\n                            err_msg: data.msg\r\n                        }\r\n                    })\r\n                    return;\r\n                }\r\n                const type = data.request;\r\n                const payload = JSON.parse(data.msg);\r\n                dispatch({ type, payload});\r\n                break;\r\n            case \"privateMessage\":\r\n                if(data.request === \"priMsg_feedback\") {\r\n                    dispatch({type: PRI_MESSAGE, payload: null, sender: null, feedback: data.msg});\r\n                    break;\r\n                }\r\n                const sender = data.request;\r\n                //const payload = JSON.parse(data.msg);\r\n                dispatch({type: PRI_MESSAGE, payload: JSON.parse(data.msg), sender: sender, feedback: null});\r\n                break;\r\n            case \"setallusers\":\r\n                dispatch({\r\n                    type: SETALLUSERS,\r\n                    payload: JSON.parse(data.msg)\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport {connect} from \"react-redux\";\r\nimport {message} from \"antd\";\r\n\r\nconst PrivateRoute = ({component: Component, ...props}) => {\r\n    return <Route {...props} render={() => {\r\n        const login = props.logInStore.isSignedIn;\r\n        if (login){\r\n            return <Component />\r\n        } else {\r\n            return <Redirect to={{\r\n                pathname: '/'\r\n            }}/>\r\n        }\r\n    }}/>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { logInStore: state.login }\r\n};\r\n\r\nexport default connect(mapStateToProps, {})(PrivateRoute);\r\n","import './App.css';\r\nimport React ,{useRef} from 'react'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport Login from './components/login/login'\r\nimport Chat from './components/chat/index'\r\nimport { createBrowserHistory } from 'history'\r\nimport { useEffect } from 'react/cjs/react.production.min'\r\nimport webSocket from \"./components/websocket/Websocket\"\r\nimport { onMessage } from './actions/index'\r\nimport { connect } from 'react-redux'\r\nimport {Modal} from \"antd\";\r\nimport PrivateRoute from \"./auth/privateRoute\";\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst App = (props) => {\r\n    const {dispatch, message} = props;\r\n\r\n    webSocket.onopen = () => {\r\n    }\r\n\r\n    webSocket.onmessage = (message) => {\r\n      props.onMessage(message);\r\n    }\r\n\r\n    webSocket.onclose = () => {\r\n        Modal.error({content: \"Websocket disconnected, please reenter the chat app\"});\r\n    }\r\n\r\n    return (\r\n    <div className=\"App\">\r\n       <Router history={history}>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Login} />\r\n          <PrivateRoute path=\"/chat\" exact component={Chat}/>\r\n          {/*<Route path=\"/chat\" exact component={Chat}/>*/}\r\n        </Switch>\r\n      </Router> \r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return { message: state.message }\r\n};\r\n\r\nexport default connect(mapStateToProps, { onMessage })(App);\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { SIGN_IN, SIGN_OUT } from '../actions/type';\r\nimport userEvent from \"@testing-library/user-event\";\r\n\r\nconst INTIAL_STATE = {\r\n  isSignedIn: null,\r\n  user: null,\r\n  mesId: 0,\r\n  msg: null\r\n};\r\n\r\nexport default (state = INTIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      if (action.payload.isSignedIn === true)\r\n        return { ...state, isSignedIn: true, user: action.payload.user, mesId: action.payload.mesId, msg: action.payload.msg };\r\n      else\r\n        return { ...state, isSignedIn: false, user: null, mesId: action.payload.mesId, msg: action.payload.msg};\r\n    case SIGN_OUT:\r\n      return { ...state, isSignedIn: null, user: null, mesId: action.payload.mesId, msg: action.payload.msg };\r\n    default:\r\n      return state;\r\n  }\r\n};","import {\r\n  ON_MESSAGE,\r\n  DELETE_MESSAGE,\r\n  EDIT_MESSAGE,\r\n  RECALL_MESSAGE, ON_MESSAGE_ERR\r\n} from \"../actions/type\";\r\n\r\nconst INITIAL_STATE = {\r\n  messages: {},\r\n  err_msg: \"\"\r\n};\r\n\r\nexport default function (state = INITIAL_STATE, action)  {\r\n  switch (action.type) {\r\n    case ON_MESSAGE_ERR: {\r\n      return {\r\n        err_msg: action.payload.err_msg,\r\n        messages: {}\r\n      };\r\n    }\r\n    case ON_MESSAGE: {\r\n      const { messages } = state;\r\n      const { id, text, time, sender, chatRoom, received } = action.payload;\r\n      if (!messages[chatRoom]) {\r\n        messages[chatRoom] = [];\r\n      }\r\n      messages[chatRoom].push({\r\n        id,\r\n        text,\r\n        time,\r\n        sender,\r\n        received\r\n      });\r\n      return { ...state, messages: { ...messages } };\r\n    }\r\n    case DELETE_MESSAGE: {\r\n      const { messages } = state;\r\n      const { messageId, chatRoom } = action.payload;\r\n      const newChatRoomMessages = messages[chatRoom].filter(\r\n        m => m.id !== messageId\r\n      );\r\n      const newMessages = { ...messages };\r\n      newMessages[chatRoom] = newChatRoomMessages;\r\n      return {\r\n        ...state,\r\n        messages: newMessages\r\n      };\r\n    }\r\n    case RECALL_MESSAGE: {\r\n      const { messages } = state;\r\n      const { messageId, chatRoom, recallTime } = action.payload;\r\n      const newChatRoomMessages = messages[chatRoom].map(m => {\r\n        if (m.id === messageId) {\r\n          m.isRecalled = true;\r\n          m.recallTime = recallTime;\r\n          m.text = \"\";\r\n        }\r\n        return m;\r\n      });\r\n      const newMessages = { ...messages };\r\n      newMessages[chatRoom] = newChatRoomMessages;\r\n      return {\r\n        ...state,\r\n        messages: newMessages\r\n      };\r\n    }\r\n    case EDIT_MESSAGE: {\r\n      const { messages } = state;\r\n      const { messageId, chatRoom, editedText } = action.payload;\r\n      const newChatRoomMessages = messages[chatRoom].map(m => {\r\n        if (m.id === messageId) {\r\n          m.text = editedText;\r\n        }\r\n        return m;\r\n      });\r\n      const newMessages = { ...messages };\r\n      newMessages[chatRoom] = newChatRoomMessages;\r\n      return {\r\n        ...state,\r\n        messages: newMessages\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { SETALLUSERS } from '../actions/type';\r\n\r\nconst INITIAL_STATE = {\r\n  allUserList : []\r\n}\r\n\r\n\r\nexport default (state =  INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case SETALLUSERS:\r\n      return {...state, allUserList: action.payload}\r\n    default:\r\n      return state;\r\n  }\r\n}","import {ROOM, JOIN_ROOM, EXIT_ROOM} from \"../actions/type\";\r\nimport {act} from \"@testing-library/react\";\r\n\r\nconst INTIAL_STATE = {\r\n    request: null,\r\n    type: null,\r\n    msg: null,\r\n    currentRoom: null,\r\n    joinedRoom:[],\r\n    userList: [[]],\r\n    allRooms: [],\r\n    isPublic: []\r\n};\r\n\r\nexport default (state = INTIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case ROOM:\r\n           let selectedRoom = state.currentRoom;\r\n           if(action.payload.param1 === \"[]\") selectedRoom = null;\r\n            return {\r\n                request: action.payload.request,\r\n                type: action.payload.type,\r\n                msg: action.payload.msg,\r\n                joinedRoom: parse(action.payload.param1) || state.joinedRoom,\r\n                userList: parseNestedList(action.payload.param1, action.payload.param2) || state.userList,\r\n                allRooms: parse(action.payload.param3) || state.allRooms,\r\n                userName: action.payload.param4 || state.userName,\r\n                isPublic: parse(action.payload.param5) || state.isPublic,\r\n                currentRoom: selectedRoom\r\n            };\r\n        case JOIN_ROOM: {\r\n            return {\r\n                ...state,\r\n                msg: null,\r\n                currentRoom: action.payload\r\n            }\r\n        }\r\n        case EXIT_ROOM:{\r\n            return {\r\n                ...state,\r\n                msg:null,\r\n                currentRoom: action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst parse = (value)=>{\r\n    if (value) {\r\n        if(value === \"[]\") return [];\r\n        let v = value.substring(1, value.length - 1);\r\n        return v.split(\", \");\r\n    }\r\n    return null;\r\n}\r\n\r\nconst parseNestedList = (param1, value) =>{\r\n    if(value) {\r\n        if(value === \"[]\") return [];\r\n        let length = parse(param1).length;\r\n        let list = []\r\n        let v = value.substring(1, value.length - 1)\r\n        for(let i = 0; i < length; i++){\r\n            let start = v.indexOf(\"[\");\r\n            let end = v.indexOf(\"]\");\r\n            let ele = v.substring(start + 1, end).split(\", \");\r\n            list.push(ele);\r\n            v = v.substring(end + 1);\r\n        }\r\n        return list;\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n","import {ON_REPORT} from '../actions/type';\r\n\r\nconst INITIAL_STATE = {\r\n    isReportAdminVisible: false,\r\n    reportedUsername:\"\",\r\n    reportedReason: \"\",\r\n    reportedRoom:\"\"\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case ON_REPORT:\r\n            return { ...state, isReportAdminVisible: true, reportedReason: action.payload.reportedReason,\r\n                reportedUsername: action.payload.reportedUsername, reportedRoom: action.payload.reportedRoom};\r\n        default:\r\n            return state;\r\n    }\r\n};","import {PRI_MESSAGE, RESET, SIGN_OUT} from '../actions/type';\r\nimport userEvent from \"@testing-library/user-event\";\r\n\r\nconst INTIAL_STATE = {\r\n    message: null,\r\n    sender: null,\r\n    feedback: null\r\n};\r\n\r\nexport default (state = INTIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case PRI_MESSAGE:\r\n            return { ...state, sender: action.sender, message: action.payload, feedback: action.feedback };\r\n        case SIGN_OUT:\r\n            return {...state, ...INTIAL_STATE};\r\n        default:\r\n            return state;\r\n    }\r\n};","import { message } from 'antd';\r\nimport { combineReducers } from 'redux';\r\nimport loginReducer from './loginReducer';\r\nimport messageReducer from './messageReducer';\r\nimport userListReducer from './userListReducer';\r\nimport roomReducer from \"./roomReducer\";\r\nimport reportReducer from \"./reportReducer\";\r\nimport priMessageReducer from \"./priMessageReducer\";\r\n\r\n\r\nexport default combineReducers({\r\n  login: loginReducer,\r\n  message: messageReducer,\r\n  userList: userListReducer,\r\n  room: roomReducer,\r\n  report: reportReducer,\r\n  priMessage: priMessageReducer\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, /* preloadedState, */ composeEnhancers(applyMiddleware(reduxThunk)));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}